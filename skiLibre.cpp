#define _WIN32_WINNT 0x0500
#include <cstdlib>
#include <iostream>
#include <stdio.h>      /* printf, scanf, puts, NULL */
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <windows.h>
#include <conio.h>
#include <process.h>
#include <fstream>
#include <ctime>
#include <sstream>

#define NUM_THREADS     1

// by GerH, 2014

using namespace std;

    const int zei=40;
    const int spa=15;
    unsigned long long int timecount=0;
    bool UhrTickt=false;
    bool soundOn=true;
    bool musicOn=true;
    int leben=10;
    bool cheater=false;
    
    unsigned _stdcall ThreadFunc(void* params){    
     //do work
     while(true){
        if(UhrTickt==false)
           break;
        Sleep(1000);
        timecount--;
     }
     //end of thread
     _endthreadex(0);
     return 0;
     }

    void remove_scrollbar(){
    HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO info;
    GetConsoleScreenBufferInfo(handle, &info);
    COORD new_size = 
    {
        info.srWindow.Right - info.srWindow.Left + 1,
        info.srWindow.Bottom - info.srWindow.Top + 1
    };
      SetConsoleScreenBufferSize(handle, new_size);
    }

    void add_scrollbar(){//setzt buffer auf max
         HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
         CONSOLE_SCREEN_BUFFER_INFO info;
         GetConsoleScreenBufferInfo(handle, &info);
         COORD new_size = {700,1000};
         SetConsoleScreenBufferSize(handle, new_size);
    }
    
    string encryptDecrypt(string toEncrypt) {
       char key[900] = {'§','C','$','p','$','X','§','$','N','t','%','t','§','f','x','%','x','t','?','s','$','W','N','&','n','T','/','p','%','Y','V','(','M','F','e','J','7','&','A','r','4','A','H','r','a','n','c','§','t','F','H','D','f',')','g','w','F','§','H','R','m','a','w','y','$','F','M','§','4','U','g','P','J','C','$','r','C','b','N','%','m','d','j','u','9','2','q','A','/','8','a','d','W','c','U','6','m','Y','2','4','w','c','p','p','Z','2','B','9','3','y','g','4','m','t','q','r','F','y','q','D','q','t','F','D','F','K','8','6','k','S','e','t','v','b','R','u','2','M','B','n','6','7','4','7','s','x','q','7','H','W','5','M','6','a','z','P','J','j','u','x','Y','K','G','H','R','C','N','X','T','A','T','K','a','a','M','6','K','j','K','9','J','J','d','Q','K','d','r','x','C','u','C','K','g','N','a','Z','J','W','B','4','v','!','Q','n','a','p','6','C','s','j','7','t','Z','P','a','a','N','U','F','4','N','n','3','T','a','F','s','x','5','s','q','E','u','9','V','Z','Q','W','V','V','Q','2','x','H','6','h','j','N','C','q','C','p','6','4','b','m','z','r','5','S','C','Z','7','4','L','H','E','X','t','M','K','U','6','R','f','E','%','W','Z','m','5','b','r','e','3','D','3','V','y','a','A','X','Z','q','w','H','E','J','Q','8','u','b','X','j','3','2','P','t','K','Y','c','7','N','v','w','j','E','r','b','w','P','m','x','R','S','W','k','=','f','2','G','G','P','2','N','R','Z','T','U','z','R','w','P','k','u','a','j','U','8','b','S','Q','y','c','f','h','2','b','b','z','G','2','3','Q','Z','C','N','w','M','s','h','c','N','8','6','p','9','d','7','G','U','b','6','L','m','T','s','X','P','x','v','J','f','P','8','k','$','u','z','x','B','s','r','h','V','n','N','u','y','5','b','B','2','9','L','x','y','v','7','t','r','Y','n','R','J','h','g','d','z','L','L','A','z','X','K','3','q','f','D','T','U','w','9','4','E','4','s','H','2','S','e','s','7','p','H','9','c','q','E','B','p','9','8','J','F','B','s','G','7','S','Z','M','G','E','z','K','q','r','d','m','Q','7','f','7','s','N','Z','3','Y','8','3','F','L','2','Q','k','Q','9','h','j','U','3','c','Q','U','s','3','Z','G','X','Z','j','D','b','6','F','B','m','a','X','Z','G','D','M','J','H','j','V','R','E','K','d','Y','K','R','S','e','x','Z','D','g','8','L','j','5','G','P','p','9','V','r','7','B','j','b','E','W','H','7','M','D','Y','E','L','2','3','A','m','4','r','h','V','z','7','V','V','q','w','F','J','C','Z','h','N','f','r','W','k','B','Z','J','S','W','J','5','t','v','Z','P','f','B','U','x','u','n','j','b','y','7','M','k','R','3','V','z','a','p','p','j','v','b','G','v','J','E','3','t','K','Y','9','B','7','k','r','P','5','p','U','3','n','u','C','g','X','f','M','y','M','w','3','C','n','N','A','t','y','B','w','a','8','w','d','7','7','N','Z','r','X','y','m','9','d','z','j','x','6','h','v','X','E','L','e','B','Q','R','Y','4','4','r','e','j','w','m','h','3','8','4','f','m','k','w','x','X','D','y','y','L','a','j','T','m','A','n','P','5','y','A','W','7','L','r','j','E','5','L','K','R','C','P','g','9','8','4','r','u','G','v','A','n','8','d','C','A','T','m','X','u','C','L','6','3','T','L','W','P','b','L','u','x','e','F','x','L','M','v','b','f','c','V','E','Z','J','B','w','Q','a','L','K','V','X','x','t','K','R','K','C','W','P','U','T','A','R','A','B','P','v','D','h','w','7','k','m','d','6','v','Y','F','u','m','F','3','9','X','c','4','4','g','n','T','8','s','M','D','Z','m','8','U','T','T','C','v','D','Q','7','§','r','P','6','e','t','T','s','u','h','9','s','4','9','s','7','6','a','4','d','v','T','Y','7','k','W','h','R','Z','b','6','8','&','q','D','C','W','N','t','z','M','3','G','S','w','8','F','M','N','d','M','w','2','v','8','p','p','P','2'};
       string output = toEncrypt;
    
       for (int i = 0; i < toEncrypt.size(); i++)
          output[i] = toEncrypt[i] ^ key[i % (sizeof(key) / sizeof(char))];
    
       return output;
    }
    
    void manageHiscore(int score, string wonGame){   //wonGame: y/n
         //add cheater
         system("COLOR A0");
         HWND console = GetConsoleWindow();
         RECT r;
         GetWindowRect(console, &r);
         add_scrollbar();
         MoveWindow(console, r.left, r.top, 470, 470, TRUE);
         remove_scrollbar();
         char ski=92;
    
         //read:
         string allScores="";
         char sep = 24;      //Pfeil rauf
         string name="no-name";
         cout << "\n\nEnter your name: ";
         cin >> name;
         name.resize (10,' ');
         
    ofstream myfile;
    
    string PartString="";
    string line;
    ifstream openFile ("SLhs.slf");
    if (openFile.is_open()){
       while (getline (openFile,line)){
            PartString = PartString + line + "\n";
       }
       openFile.close();
    }
    else{
         cout << "Error: Unable to open file!"; 
    }
    PartString.erase(PartString.size()-1);
    allScores=PartString;
         
         //cout << allScores;
         allScores=encryptDecrypt(allScores);
         //cout << allScores;
         //Sleep(1000);//
         
         string wonGames[10]={};
         string names[10] ={};
         int   scores[10] ={};
         
         int hilfsInt=0;
         int hilfsArrayInt=0;
         for(size_t p=0, q=0; p!=allScores.npos; p=q){
            if(hilfsArrayInt>9)
               break;
               
            if(hilfsInt==0){
               //cout << "\nwonGames["<<hilfsArrayInt<<"]="<<allScores.substr(p+(p!=0), (q=allScores.find(sep, p+1))-p-(p!=0)); 
               wonGames[hilfsArrayInt]=allScores.substr(p+(p!=0), (q=allScores.find(sep, p+1))-p-(p!=0));         
            } 
            if(hilfsInt==1){
               //cout << "\nnames["<<hilfsArrayInt<<"]="<<allScores.substr(p+(p!=0), (q=allScores.find(sep, p+1))-p-(p!=0)); 
               names[hilfsArrayInt]=allScores.substr(p+(p!=0), (q=allScores.find(sep, p+1))-p-(p!=0));         
            }
            if(hilfsInt==2){
               //cout << "\nscores["<<hilfsArrayInt<<"]="<<allScores.substr(p+(p!=0), (q=allScores.find(sep, p+1))-p-(p!=0)); 
               stringstream myStream(allScores.substr(p+(p!=0), (q=allScores.find(sep, p+1))-p-(p!=0)));
               myStream >> scores[hilfsArrayInt];
               myStream.ignore();
               
               hilfsArrayInt++;
            }
            
            hilfsInt++;
            if(hilfsInt>2)
               hilfsInt=0;
               
         }
/*n
no Amadeus   2000no Brionna   1800no Colden    1600no Daleysa   1400no Exavier   1200no Fannie    1000no Giovonni  800no Hadassa   600no Ilianna   400no Jeronimo  100
*/

         //check:
         if(score>0){
            int replace=0;        
            for(int i=0; i<10; i++){
               if(score<scores[i]){
                  replace=i+1;
               }
            }
            //cout << "R" << replace;
            if(replace!=10){
               for(int i=9; i>replace; i--){
                  wonGames[i]=wonGames[i-1];
                  names[i]   =names[i-1];
                  scores[i]  =scores[i-1];
               }
               wonGames[replace]=wonGame; names[replace]=name; scores[replace]=score;
            }       
         }
                 
         //write:
stringstream sstm;

         string BuildString = "";
         string encString;
         for(int i=0; i<10; i++){
                 sstm << BuildString << wonGames[i] << sep << names[i] << sep << scores[i] << sep;
              //BuildString = BuildString + wonGames[i] + sep + names[i] + sep + scores[i] + sep;
         }
         BuildString = sstm.str();
         encString = encryptDecrypt(BuildString);
         ofstream writeFile;
         writeFile.open ("SLhs.slf");
         writeFile << encString;
         writeFile.close();
         
         
         //output:
         system ("cls");
         cout << "+------------------------------+\n";
         cout << "|         ~High Score~         |\n" ;
         cout << "+------------------------------+\n\n";
         cout << "#" << "   won game?" << "   name"<< "       score\n" ;
         for(int i=0; i<10; i++){
            if(i<9)
               cout << " " << i+1 << ". " << wonGames[i] << "         " <<  names[i] << " " <<  scores[i] << endl;
            else
               cout << i+1 << ". " << wonGames[i] << "         " <<  names[i] << " " <<  scores[i] << endl;
         }
         cout << "\nYour score: " << score << " by " << name;
         
         cout << "\n\n\nPress R to reset or SPACE to exit.";
         Sleep(500);
         while(true){  
            if(GetAsyncKeyState(0x52)){//R = 0x52,
               cout << "\nU sure u want to reset high scores (ur scores will b deleted)?(y/n)";
               char resetChar='n';
               cin>> resetChar;
               if(resetChar=='y'){    
                  string defaultStr = "no Amadeus   2000no Brionna   1800no Colden    1600no Daleysa   1400no Exavier   1200no Fannie    1000no Giovonni  800no Hadassa   600no Ilianna   400no Jeronimo  100";
                  defaultStr = encryptDecrypt(defaultStr);
                  ofstream writeFile;
                  writeFile.open ("SLhs.slf");
                  writeFile << defaultStr;
                  writeFile.close();
                  cout << "\nHigh score reseted!";
               }
            }
            if(GetAsyncKeyState(0x20)){//Space
               break;
            }
         }
         
         exit(0);
    }
    
    void winEntireGame(int score){
         HWND console = GetConsoleWindow();
         RECT r;
         GetWindowRect(console, &r);
         add_scrollbar();
         MoveWindow(console, r.left, r.top, 470, 470, TRUE);
         remove_scrollbar();
         
         char ski=92;
          system("COLOR A0");
       
         system ("cls");
         cout << "You completet all 16 mountains!\n\n";// Do you want to continue(y/n)? "; 
         cout << "Your Score: " << score + leben*100 + 100;
         
         manageHiscore(score, "yes");
         
         Sleep(10000);
         
         system ("cls");
         
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(1000);system ("cls"); 
   
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            ||"<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /|| "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          / ||  "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        ||"<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~||~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /|| "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /...||...."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    / ||  "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /...//......"<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /  ||   "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/...//........"<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    ||"<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/   ||    "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/...//.........."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /|| "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/     "<<ski<<""<<ski<<"     "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/...//............"<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  / ||  "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~"<<ski<<""<<ski<<"~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag...//.............aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /  ||   "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./........."<<ski<<""<<ski<<"...."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /   ||    "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../..........."<<ski<<""<<ski<<"...."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/    ||     "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../............."<<ski<<""<<ski<<"...."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~||~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./..............."<<ski<<""<<ski<<"...."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"...||..../~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"................."<<ski<<""<<ski<<"...."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"..||.../..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"................."<<ski<<""<<ski<<"...."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<".||../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<"||./..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"|/....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 
cout << "+---------------------------------------------------+\n"
<< "|                     _                             |\n"
<< "|                    / "<<ski<<"          _                 |\n"
<< "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
<< "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
<< "|                 /       "<<ski<<"    /     "<<ski<<"              |\n"
<< "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
<< "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
<< "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
<< "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
<< "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
<< "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
<< "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
<< "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
<< "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
<< "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
<< "|^^ag..................aaaag..................aaag^^|\n"
<< "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
<< "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
<< "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
<< "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
<< "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
<< "+---------------------------------------------------+\n";
         
         Sleep(100);system ("cls"); 
		 

      
cout<< "+---------------------------------------------------+\n"
    << "|                     _                             |\n"
    << "|                    / "<<ski<<"          _                 |\n"
    << "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
    << "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
    << "|             *   /       "<<ski<<"    /     "<<ski<<"              |\n"
    << "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
    << "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
    << "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
    << "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
    << "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
    << "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
    << "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
    << "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
    << "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
    << "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
    << "|^^ag..................aaaag..................aaag^^|\n"
    << "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
    << "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
    << "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
    << "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
    << "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "+---------------------------------------------------+\n";

         Sleep(1000);system ("cls");
         
cout<< "+---------------------------------------------------+\n"
    << "|                     _           *                 |\n"
    << "|                    / "<<ski<<"          _                 |\n"
    << "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
    << "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
    << "|             *   /       "<<ski<<"    /     "<<ski<<"              |\n"
    << "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
    << "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
    << "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
    << "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
    << "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
    << "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
    << "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
    << "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
    << "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
    << "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
    << "|^^ag..................aaaag..................aaag^^|\n"
    << "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
    << "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
    << "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
    << "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
    << "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "+---------------------------------------------------+\n";

         Sleep(1000);system ("cls");
         
cout<< "+---------------------------------------------------+\n"
    << "|                     _           *                 |\n"
    << "|                    /*"<<ski<<"          _                 |\n"
    << "|                   /   "<<ski<<"        / "<<ski<<"                |\n"
    << "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
    << "|             *   /       "<<ski<<"    /     "<<ski<<"              |\n"
    << "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
    << "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
    << "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
    << "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
    << "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
    << "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
    << "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
    << "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
    << "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
    << "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
    << "|^^ag..................aaaag..................aaag^^|\n"
    << "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
    << "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
    << "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
    << "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
    << "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "+---------------------------------------------------+\n";

         Sleep(1000);system ("cls");
         
cout<< "+---------------------------------------------------+\n"
    << "|                     *           *                 |\n"
    << "|                    ***          _                 |\n"
    << "|                   / * "<<ski<<"        / "<<ski<<"                |\n"
    << "|                  /     "<<ski<<"      /   "<<ski<<"               |\n"
    << "|             *   /       "<<ski<<"    /     "<<ski<<"              |\n"
    << "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
    << "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
    << "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
    << "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
    << "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
    << "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
    << "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
    << "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
    << "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
    << "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
    << "|^^ag..................aaaag..................aaag^^|\n"
    << "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
    << "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
    << "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
    << "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
    << "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "+---------------------------------------------------+\n";

         Sleep(1000);system ("cls");
         
cout<< "+---------------------*-----------------------------+\n"
    << "|                    ***          *                 |\n"
    << "|                   *****         _                 |\n"
    << "|                   /***"<<ski<<"        / "<<ski<<"                |\n"
    << "|                  /  *  "<<ski<<"      /   "<<ski<<"               |\n"
    << "|             *   /       "<<ski<<"    /     "<<ski<<"              |\n"
    << "|             _  /         "<<ski<<"  /       "<<ski<<"             |\n"
    << "|            / "<<ski<<"/           "<<ski<<"/         "<<ski<<"            |\n"
    << "|           /   "<<ski<<"~~~~~~~~~~~/           "<<ski<<"           |\n"
    << "|          /     "<<ski<<"........./~~~~~~~~~~~~~"<<ski<<"          |\n"
    << "|         /~~~~~~~"<<ski<<"......./..............."<<ski<<"         |\n"
    << "|        /........."<<ski<<"...../................."<<ski<<"        |\n"
    << "|       /..........."<<ski<<".../..................."<<ski<<"       |\n"
    << "|------/............."<<ski<<"./....................."<<ski<<"------|\n"
    << "|^^^^^/..............."<<ski<<"......................."<<ski<<"^^^^^|\n"
    << "|^^^^/................."<<ski<<"......................."<<ski<<"^^^^|\n"
    << "|^^ag..................aaaag..................aaag^^|\n"
    << "|^d8aaaaaag......aaaaad888aaaaaaaag.aaaaaaaaad8888b^|\n"
    << "|^Y888888aaaaaaad8888888888888888aad88888888888888P^|\n"
    << "|^^Y8888888888888888888zzY88888888888888888888zzzs^^|\n"
    << "|^^^zzzzY88888888zzzzzzzs^zzzzzzY888zzzzzzzzzzzs^^^^|\n"
    << "|^^^^^^^^zzzzzzzzzs^^^^^^^^^^^^^^zzzzs^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|\n"
    << "+---------------------------------------------------+\n";
         
Sleep(100);Beep(500, 300);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);
Sleep(100);Beep(500, 300);Beep(400, 100);Beep(400, 100);Beep(300, 100);
Sleep(100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(300);
Sleep(100);Beep(600, 100);Beep(600, 100);Beep(600, 300);Beep(400, 100);Beep(400, 300);Beep(600, 200);Beep(600, 100);Beep(600, 100);
Sleep(100);Beep(400, 100);Beep(300, 200);Beep(300, 100);Beep(300, 100);Beep(600, 100);Beep(750, 80);Beep(700, 80);Beep(650, 80);Beep(300, 200);Beep(300, 100);Beep(300, 100);
Sleep(100);Beep(500, 200);Beep(600, 100);Beep(600, 300);Beep(500, 100);Beep(500, 100);Beep(750, 80);Beep(700, 80);Beep(650, 80);
Sleep(100);Beep(400, 200);Beep(400, 100);Beep(400, 100);Beep(400, 100);Beep(600, 100);Beep(750, 80);Beep(700, 80);Beep(650, 80);Beep(400, 350);
Sleep(300);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(100);Beep(600, 100);Beep(400, 300);Beep(500, 100);Beep(550, 100);Beep(550, 100);Beep(600, 100);Beep(400, 300);Beep(500, 100);Beep(650, 300);Beep(650, 300);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(100);Beep(600, 100);Beep(400, 300);Beep(500, 100);Beep(550, 100);Beep(750, 300);Beep(600, 100);Beep(400, 300);Beep(500, 100);Beep(650, 300);Beep(250, 300);
Sleep(300);
Sleep(100);Beep(750, 90);Beep(600, 100);Beep(400, 300);Beep(400, 90);Beep(400, 300);Beep(600, 200);Beep(600, 100);Beep(600, 100);
Sleep(100);Beep(500,100);Beep(350,130);Beep(550,180);Beep(650,100);Beep(300,250);Beep(500,100);Beep(600,200);
Sleep(100);Beep(600, 300);Beep(600, 100);Beep(600, 100);Beep(400, 200);Beep(300, 90);Beep(300, 300);Beep(600, 200);Beep(600, 100);Beep(600, 100);
Sleep(100);Beep(600,100);Beep(500,100);Beep(500,100);Beep(500,100);Beep(250,300);Beep(500,100);Beep(600,100);Beep(550,100);Beep(550,140);
Sleep(300);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(100);Beep(600, 100);Beep(400, 300);Beep(500, 100);Beep(550, 100);Beep(550, 100);Beep(600, 100);Beep(400, 300);Beep(500, 100);Beep(650, 300);Beep(650, 300);
Sleep(300);
Sleep(100);Beep(550,100);Beep(350,100);Beep(550,100);Beep(600,100);Beep(250,100);Beep(300,100);Beep(250,100);Beep(300,100);Beep(550,100);Beep(250,300);Beep(350,100);Beep(550,100);Beep(550,140);Beep(550,100);Beep(250,300);Beep(270,100);Beep(550,100);Beep(260,100);
Sleep(100);Beep(600,100);Beep(350,100);Beep(300,100);Beep(580,1000);Beep(500,100);Beep(280,100);Beep(580,120);Beep(480,100);Beep(600,120);Beep(460,120);Beep(680,1000);Beep(380,1000);Beep(580,1000);Beep(480,1000);
Sleep(300);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(100);Beep(480, 200);Beep(380, 100);Beep(380, 100);Beep(280, 100);Beep(280, 100);Beep(180, 100);Beep(380, 100);Beep(280, 100);Beep(270, 100);Beep(280, 100);
Sleep(100);Beep(460, 200);Beep(360, 100);Beep(360, 100);Beep(260, 100);Beep(260, 100);Beep(160, 100);Beep(360, 100);Beep(260, 100);Beep(250, 100);Beep(260, 100);
Sleep(300);
Sleep(100);Beep(750, 100);Beep(250, 100);
Sleep(100);Beep(400,100);Beep(500,100);Beep(400,100);Beep(260,100);Beep(500,100);Beep(400,100);Beep(350,100);Beep(260,300);Beep(750,100);Beep(730,100);Beep(710,100);Beep(690,200);Beep(390,200);Beep(290,200);Beep(710,100);Beep(420,300);
Sleep(100);Beep(710,100);Beep(200,100);Beep(190,100);Beep(600,100);Beep(500,100);Beep(600,120);Beep(300,100);Beep(290,100);Beep(250,150);Beep(750,90);Beep(700,90);Beep(600,120);Beep(250,200);Beep(600,120);Beep(450,200);Beep(270,100);Beep(570,100);Beep(370,100);
Sleep(300);
Sleep(100);Beep(500, 200);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(500, 200);Beep(400, 100);Beep(400, 100);Beep(300, 100);Beep(300, 100);Beep(200, 100);Beep(400, 100);Beep(300, 100);Beep(250, 100);Beep(300, 100);
Sleep(100);Beep(600, 100);Beep(750, 1000);Beep(600, 1000);Beep(450, 1000);

         Sleep(8000);system ("cls");
         system("COLOR 1E");
         
         cout << " CREDITS\n\n";
         cout << "    Producer . . . . . . GerH\n";Sleep(900);
         cout << "    Idea . . . . . . . . GerH\n";Sleep(900);
         cout << "    Programming  . . . . GerH\n";Sleep(900);
         cout << "    Debugging  . . . . . GerH\n";Sleep(900);
         cout << "    Music  . . . . . . . GerH\n";Sleep(900);
         cout << "    Sound Effects  . . . GerH\n";Sleep(900);
         cout << "    Pseudonym  . . . . . GerH\n";Sleep(900);
         cout << "    Text . . . . . . . . Wikipedia\n\n";   Sleep(900);
         cout << " Press SPACE to exit. \n";                Sleep(900);
         
         while(true){ 
            if(GetAsyncKeyState(0x20)){//Space
               break;
            }
         }
         
         exit(0);
    }
    
    int cheats(){
         string geheim="";
         cin >> geheim;
         if(geheim=="Ski"){
            system ("cls");
            cout << "and...?\n";
               cin >> geheim;
               if (geheim=="Free"){
                  system ("cls");
                  cout << "Secret Screen     \n\n\n";
                  cout << "NUM7...Ann\x84hernd Unsterblichkeit (God Mode)\n";
                  cout << "NUM8...Dog Mode \n";            //NUMPAD8 = 0x68,
                  cout << "NUM9...Colours \n";             //NUMPAD9 = 0x69,
                  cout << "NUM4...Special Thanks\n";
                  cout << "NUM5...Dev\n";
                  cout << "NUM6...Write Text(fast)\n";
                  cout << "NUM1...Write Text(slow)\n";
                  cout << "NUM2...Produce Text \n";        //NUMPAD2 = 0x62,
                  cout << "NUM3...Piano \n";               //NUMPAD3 = 0x63,
                  cout << "NUM0...Beep \n";                //NUMPAD0 = 0x60,
                  
                  cout << "\n\nPress C to return and start a game.";
                  
                  while(true){
                     if(GetAsyncKeyState(0x64)){   //NUMPAD4 = 0x64,
                        system ("cls");
                        cout << "Special thanks go to: \n";
                        cout << "\nhttp://www.cplusplus.com/forum/beginner/49578/  thread\n";
                        cout << "\nhttp://cboard.cprogramming.com/cplusplus-programming/97959-%5Bask%5D-how-remove-scrollbar.html\n";
                        cout << "\nhttp://en.wikipedia.org/wiki/Backcountry_skiing\n";
                        cout << "\nhttp://blockofcodes.blogspot.co.at/2013/06/how-to-change-text-color-of-cc-console.html\n";       
                        cout << "\nhttp://www.network-science.de/ascii/\n";
                        cout << "\nhttp://www.tutorialspoint.com/cplusplus/cpp_multithreading.htm\n";
                        cout << "\nhttps://en.wikipedia.org/wiki/List_of_mountains_by_elevation\n";
                        cout << "\nhttp://improve.dk/getting-key-state/\n";
                        cout << "\nhttp://blockofcodes.blogspot.co.at/2013/06/how-to-change-text-color-of-cc-console.html\n";      
                        cout << "\nhttp://www.network-science.de/ascii/\n";
                        cout << "\n\nPress C to return and start a game.";
                     }
                     if(GetAsyncKeyState(0x65)){   //NUMPAD5 = 0x65,
                        system ("cls");
                        cout << "Developer:      GerH\n";
                        cout << "\n\nPress C to return and start a game.";
                     }
                     if(GetAsyncKeyState(0x66)){   //NUMPAD6 = 0x66,
                        system ("cls");
                        cout << "Press C to return and start a game.\n\nText: ";
                        
                        char abc[42]={'.','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',' ',' ',' ',' ',' ','a','e','i','o','u','a','e','u','o','i'};
                        while(true){
                           cout << abc[rand() % 42];
                           if(GetAsyncKeyState(0x43)){   //c
                              break;
                           }
                        }
                     }
                     if(GetAsyncKeyState(0x61)){   //NUMPAD1 = 0x61
                        system ("cls");
                        cout << "Press C to return and start a game.\n\nText: ";
                        
                        char abc[42]={'.','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',' ',' ',' ',' ',' ','a','e','i','o','u','a','e','u','o','i'};
                        while(true){
                           cout << abc[rand() % 42];
                           Sleep(90);
                           if(GetAsyncKeyState(0x43)){   //c
                              break;
                           }
                        }
                     }
                     if(GetAsyncKeyState(0x67)){   //NUMPAD7 = 0x67
                        leben=100000;
                        cheater=true;
                        Beep(1000,150);
                        Beep(900,150);
                        Beep(800,150);
                        Beep(1150,150);
                        Beep(1050,150);
                        Beep(950,150);
                        Beep(1050,150);
                        Beep(950,150);
                        Beep(850,150);
                     }
                     if(GetAsyncKeyState(0x68)){   //NUMPAD8 = 0x68
                        leben=1;
                        cheater=true;
                        Beep(800,150);
                        Beep(900,150);
                        Beep(1000,150);
                        Beep(950,150);
                        Beep(1050,150);
                        Beep(1150,150);
                        Beep(850,150);
                        Beep(950,150);
                        Beep(1050,150);
                     }//NUMPAD9 = 0x69,
                     if(GetAsyncKeyState(0x69)){   //NUMPAD9 = 0x69
                        cout << "\nPress NUM9 to exit\n";
                        cout << "\nWant to test if you're epileptic?\n Just look at the screen. ;^)\n";
                        Sleep(7000);
                        HWND console = GetConsoleWindow();
                        RECT r;
                        GetWindowRect(console, &r);
                        add_scrollbar();
                        MoveWindow(console, r.left, r.top, 2620, 2600, TRUE);
                        remove_scrollbar();
                        for(int i=0; i<100000; i++){
                           cout << "VIRUS! ";
                        }
                        while(true){
                           system("COLOR 01");
                           system("COLOR 12");
                           system("COLOR 23");
                           system("COLOR 34");
                           system("COLOR 45");
                           system("COLOR 56");
                           system("COLOR 67");
                           system("COLOR 78");
                           system("COLOR 89");
                           system("COLOR 9A");
                           system("COLOR AB");
                           system("COLOR BC");
                           system("COLOR CD");
                           system("COLOR DE");
                           system("COLOR EF");
                           system("COLOR F0");  
                           if(GetAsyncKeyState(0x69)){       //NUMPAD9
                              break;
                           }
                        }
                     }
                     
                     if(GetAsyncKeyState(0x63)){   //NUMPAD3 = 0x63
                        cout << "\nKeys:  A S D F G H J K L\n";
                        cout << "\n       NUM3 - exit\n";
                        while(true){
                           if(GetAsyncKeyState(0x41)){       //A
                              system("COLOR 01");
                              Beep(200,250);
                           }
                           if(GetAsyncKeyState(0x53)){       //S
                              system("COLOR 12");
                              Beep(320,250);
                           }
                           if(GetAsyncKeyState(0x44)){       //D
                              system("COLOR 23");
                              Beep(440,250);
                           }
                           if(GetAsyncKeyState(0x46)){       //F
                              system("COLOR 34");
                              Beep(560,250);
                           }
                           if(GetAsyncKeyState(0x47)){       //G
                              system("COLOR 45");
                              Beep(680,250);
                           }
                           if(GetAsyncKeyState(0x48)){       //H
                              system("COLOR 56");
                              Beep(800,250);
                           }
                           if(GetAsyncKeyState(0x4A)){       //J
                              system("COLOR 67");
                              Beep(920,250);
                           }
                           if(GetAsyncKeyState(0x4B)){       //K
                              system("COLOR 78");
                              Beep(1040,250);
                           }
                           if(GetAsyncKeyState(0x4C)){       //L
                              system("COLOR 89");
                              Beep(1160,250);
                           }      
                           if(GetAsyncKeyState(0x63)){       //NUMPAD3 = 0x63
                              break;
                           }
                        }
                     }
                     if(GetAsyncKeyState(0x62)){  //NUMPAD2 = 0x62,
                        char abc[42]={'.','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',' ',' ',' ',' ',' ','a','e','i','o','u','a','e','u','o','i'};
    
                        ofstream myfile;               //myfile  
                        myfile.open ("zufallsbuch.txt");
                        cout << "\n\nFile: '" << "zufallsbuch.txt" << "'\n";
    
                        clock_t tStart = clock();
                        for(int zeichen=1000000; zeichen>0; zeichen--){
                           myfile << abc[rand() % 42];
                           }
    
                           cout << "Rename/move your file now!\n"
                                << "exec time: ";
                        printf("Time taken: %.2fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);
                        Sleep(10000);
                        myfile.close();    
                     }
                     if(GetAsyncKeyState(0x60)){  //NUMPAD0 = 0x60,
                        for(int i=1; i<2000; i++){
                           Beep(i,60);
                        }
                        Beep(2000,3000);
                        exit(0);
                     }
                     if(GetAsyncKeyState(0x43)){   //c
                        break;
                     }
                  }
                  
                  return 1;
               }
               else
                   exit(0);
         }
         else
            exit(0);
    }
    
    int controls(){
        char musikSign = 14;
        char healthSign = 3;
        char distSign = 23;
        char KmhSign = 175;
        char dudeSign = 1;
        char treeSign1=6;
        char treeSign2=30;
        char scoreSign=15;
    
         system ("cls");
         system("COLOR 07");
         char ski=92;
         cout << "Controls: \n";
         cout << " a     left  \n";
         cout << " s     accelerate  \n";
         cout << " d     right \n";
         cout << "Story: \n";
         cout << " Skiing is a recreational  activity and competitive\n";
         cout << " winter sport in which the participant uses skis to\n";
         cout << " glide on snow.\n\n";
         cout << " "<<treeSign1<<"     tree           //     skier      "<<healthSign<<" health  \n";
         cout << " "<<treeSign2<<"     tree           ||                "<<distSign<<" distance\n";
         cout << " .     stone          " << ski << ski << "                "<<KmhSign<<" speed   \n";
         cout << " "<<dudeSign<<"     a running dude                   "<<scoreSign<<" time    \n\n";
         cout << "Backcountry  skiing (US),   also   called   off-piste\n";
         cout << "(Europe) or out-of-area, is skiing in the backcountry\n";
         cout << "on unmarked  or unpatrolled  areas  either  inside or\n";
         cout << "outside of a ski resort's  boundaries. This contrasts\n";
         cout << "with alpine skiing which is typically done on groomed\n";
         cout << "trails  benefiting from  a  ski  patrol.  Unlike  ski\n";
         cout << "touring backcountry skiing can include the use of ski\n";
         cout << "lifts  including  snowcats  and  helicopters.  Recent\n";
         cout << "improvements   in  equipment   have   increased   the\n";
         cout << "popularity of the sport.                             \n";
         cout << "Backcountry and off-piste skiing can be hazardous due\n";
         cout << "to avalanche, exhaustion, weather, cliffs, rock fall,\n";
         cout << "and tree wells.                                    \n\n";
         cout << " s..."<<musikSign<<"Sound Off          m..."<<musikSign<<"Music Off          ";  
         cout << "\n\n\nPress C to return.";
         
         while(true){
            if(musicOn==true){
                Beep(rand() % 500 + 37, rand() % 400 + 80); 
            }
            if(GetAsyncKeyState(0x53)){//s
               if(soundOn==true){
                  soundOn=false;
                  Beep(100,150);
                  Beep(90,150);
                  Beep(80,150);
               }
               /*if(soundOn==false){
                  soundOn=true;
                  Beep(1000,1500);
               }*/
            }
            if(GetAsyncKeyState(0x4D)){//m
               if(musicOn==true){
                  musicOn=false;
                  Beep(100,150);
                  Beep(90,150);
                  Beep(80,150);
               }
               /*if(musicOn==false){
                  musicOn=true;
                  Beep(1000,1500);
               }*/
            }
            if(GetAsyncKeyState(0x62)){//m
               cheats();
            }      
            if(GetAsyncKeyState(0x43)){//c
               
               system ("cls");
               
    HWND console = GetConsoleWindow();
    RECT r;
    GetWindowRect(console, &r);
    add_scrollbar();
    MoveWindow(console, r.left, r.top, 462, 460, TRUE);
    remove_scrollbar();
    char ski=92;
    //INTRO
    
    system("COLOR 1E");       
    
    char cX[7][53]={' ',' ','_','_','_','_','_','_','_','_','_','_','_',' ',' ',' ',' ','_','_',' ','_','_','_','_',' ',' ',' ',' ',' ','_','_','_','_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                    ' ','/',' ',' ',' ','_','_','_','_','_','/',' ',' ','|',' ','_','|','_','_','|',' ',' ',' ',' ','|',' ',' ',' ','|','_','_',ski,'_',' ','|','_','_','_','_','_','_','_','_','_',' ',' ',' ','_','_','_','_',' ',' ',
                    ' ',ski,'_','_','_','_','_',' ',' ',ski,'|',' ',' ','|','/',' ','/',' ',' ','|',' ',' ',' ',' ','|',' ',' ',' ','|',' ',' ','|','|',' ','_','_',' ',ski,'_',' ',' ','_','_',' ',ski,'_','/',' ','_','_',' ',ski,' ',
                    ' ','/',' ',' ',' ',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ','<','|',' ',' ','|',' ',' ',' ',' ','|','_','_','_','|',' ',' ','|','|',' ',ski,'_',ski,' ',ski,' ',' ','|',' ',ski,'/',ski,' ',' ','_','_','_','/',' ',
                    '/','_','_','_','_','_','_','_',' ',' ','/','_','_','|','_',' ',ski,'_','_','|','_','_','_','_','_','_','_',' ',ski,'_','_','|','|','_','_','_',' ',' ','/','_','_','|',' ',' ',' ',' ',ski,'_','_','_',' ',' ','>',
                    ' ',' ',' ',' ',' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,'/',' '};
for(int i=0; i<6; i++){
cout << endl;
for(int j=0; j<53; j++)
cout <<  cX[i][j];
}
    cout << "\n";
    
char Schifahrer[20][50]={' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'_',ski,'_',ski,'/',ski,'/','_','/','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ','_',ski,'/',ski,'/','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
' ','_',ski,'_',ski,'/','_','/','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','_',ski,'_',ski,'/','_','/','_',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'_','_','/','_','/',ski,'_',ski,'_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ','/','_','/',ski,'_',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ','|','|','|',' ',' ',' ',' ',
' ','/',' ','/',ski,'/',ski,' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ','/',ski,'/',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ','|','|','|',' ',' ',' ',' ',
' ',' ',' ',' ','/',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ','|','|','|','|','|',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ','|','|','|','|','|',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','_','_',
'_','_','_',' ','o','8','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ','|','|','|','|','|','|','|',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','.','d','8','8',
'`',',',' ','`','`','9','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'|','|','|','|','|','|','|','|','|',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','q','8','8','Y','`',' ',
' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'|','|','|','|','|','|','|','|','|',' ',
' ',' ',' ','-',',',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','`',' ',ski,' ',' ',
' ',' ',' ','`',',',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|','|','|','|','|','|','|','|','|','|',
'b',' ',' ',' ',' ','`','-',',',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,' ',
' ',' ',' ',' ',' ','`',',','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'M','M','m',',',' ',' ',' ',' ','`',',','_',' ',' ',' ',' ',' ',' ',' ',ski,' ',
' ',' ',' ',' ',' ','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'M','M','M','M','M','m',',',' ',' ',' ',' ','`','-','-','-','-','-','-','-','`',
' ',' ',' ','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'M','d','M','9','M','M','M','M','m','_',' ',' ',' ','`','-',',',' ',' ',' ',' ',
' ','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'M','M','M','M','d','[','9','M','M','M','M','m','_',' ',' ',' ','`',',','_',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'M','M','M','M','M','M','M','S','`','9','M','M','M','m',',',' ',' ',' ',' ','`',
',','_','_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'9','M','M','M','M','M','M','M','M','m','`','9','M','M','M','m','_',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'.','d','M','M','M','M','M','M','M','M','b','m','d','M','M','M','M','M','m',',',
'_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M',
'M','M','M','M','m',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};

for(int i=0; i<20; i++){
cout << endl;
for(int j=0; j<50; j++)
cout <<  Schifahrer[i][j];
}
    
    cout << "\n\n";
    cout << "SkiLibre  v 1.0.1                             by GerH\n";
    cout << "Press S to start! C for Controls!                2014";
            
               return 1;
               }
         }
    }
    
    int win(int dist, int score, int maxKmh, bool errorOccurred){
       system ("cls");
       HWND console = GetConsoleWindow();
       RECT r;
       GetWindowRect(console, &r);
       add_scrollbar();
       MoveWindow(console, r.left, r.top, 462, 460, TRUE);
       remove_scrollbar();
       
       int oldscore=score;
       if(errorOccurred==false)
          score=score+dist/10+timecount+leben+maxKmh/40;
       else
          score=score+dist/100+timecount+leben+maxKmh/40;
       //cout << "score=oldscore+dist/10+timecount+leben+maxKmh/10\n\n";
       //cout << score << "=" << oldscore << "+" << dist/10 << "+" << timecount << "+" << leben << "+" << maxKmh/10;
       
       cout << "Level cleared! \n\n";
       cout << "score   : " << score    << " \n";
       cout << "health  : " << leben    << " \n";
       cout << "distance: " << dist     << " m\n";
       cout << "max. Kmh: " << maxKmh/4 << " km/h\n";
       cout << "\n\nPress SPACE to continue.";
       if(errorOccurred==true)
          cout << " ";
       
       if(musicOn==true){
          Beep(1500,150);   
          Beep(1000,150); 
          Beep(1200,150);  
          Beep(1500,150);   
          Beep(1000,150); 
          Beep(1200,150);  
       }
       /*else{
          Sleep(1250);  
       }*/
       
       while(true){
          if(GetAsyncKeyState(0x20)){   //space
             break;
          }
       }
       
       return score;
    }
    
    void gameOver(int score){
         system("COLOR C4");
         cout << "GAME OVER!\n\n";
         int zufall=rand() % 10000;
         cout << "Your score: " << score;
         if(zufall==5)
            cout << "\n\nyou are dead :)";
             
         if(musicOn==true){
            Beep(2000, 4500);
         }
         else{
            Sleep(4500);
         }
         
         manageHiscore(score, "no ");
         
         exit(0);
    }
    
    int game(int height, int Kmh, int score){
         system ("cls");
         HWND console = GetConsoleWindow();
         RECT r;
         GetWindowRect(console, &r);
         add_scrollbar();
         MoveWindow(console, r.left, r.top, 160, 610, TRUE);    //150 620
         remove_scrollbar();
    char fenster[zei][spa]={' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
                            ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',};
               
    unsigned long long int leer1=5;                        
    unsigned long long int leer2=0;  
    unsigned long long int dist=0;                         //dist*x=time  //850 140 x=0,1647
    double timeHelp=0.1647;
    timecount=(height*timeHelp);
    timecount=timecount-timecount%10;
    int tree = rand() % 14;
    int state=2; //0-4    0 links 1 linksunten    2 unten 3 rechtsunten   4 rechts
    int round=0;
    
    int playery = 10;
    int playerx = 7;
    char ski=92;
    bool gotMessage=false;
    int dudeInt=rand() % 2; // 0 to 1
    int skier = rand() % 15;
    
    int maxKmh=0;
    int oldDist=-1;
    
    char healthSign = 3;
    char distSign = 23;
    char KmhSign = 175;
    char dudeSign = 1;
    char treeSign1=6;
    char treeSign2=30;
    char scoreSign=15;
    
    system("COLOR F2");//F=7
    
    if(height==8848)
       system("COLOR 72");
       
    UhrTickt=true;
    unsigned threadID;      //Zeit
    HANDLE hThread;
    //start the thread (calling without parameters)
    hThread = (HANDLE)_beginthreadex( NULL, 0, &ThreadFunc, NULL, 0, &threadID );

    while (dist<height){
          if(leben<1){
             gameOver(score);
          }
          if(playerx==-160){          //ned ausm Fenster gehn :)
             gameOver(score);
          }
          
          if(gotMessage==true){
             fenster[playery-1][playerx]  =' ';
             fenster[playery-1][playerx+1]=' ';
             fenster[playery-1][playerx+2]=' ';
             fenster[playery-1][playerx+3]=' ';
             fenster[playery-1][playerx+4]=' ';
             fenster[playery-1][playerx+5]=' ';
             fenster[playery-1][playerx+6]=' ';
             fenster[playery-1][playerx+7]=' ';
             gotMessage=false;
          }
          
          fenster[playery][playerx]='*';
          
          //timecount--;
          round++;
          if(Kmh>0){
             oldDist=dist;       
             dist++;
             if(dist!=oldDist+1)
                dist=oldDist+1;
          }
             
          cout << healthSign <<" ";
          if(leben<10000000)
             cout << leben  << " \n";
          else 
             cout << "a lot!\n";
          cout << KmhSign <<" ";
          if(Kmh<100000)  //1079252849  2158505698 20000000
             cout << Kmh/4  << " Kmh\n";
          if(215850569>Kmh && Kmh>100000)  
             cout << (Kmh/4)/100000  << "mil Kmh\n";  
          if(215850569<Kmh)
             cout << " a lot!\n";
          cout << distSign <<" " << dist << "/" << height << "m\n";
          cout << scoreSign<<" " << timecount/60 << "min " << timecount%60 << "s\n";
          //cout << "state:  " << state;
          
          
   		  //dude erstellen
          if(dist>0){
             if(dist%431==0 && Kmh>0){
                fenster[39][rand() % 15]=dudeSign;     //dudeInt=rand() % 2;
                if(height==8848 && dist>6000)
                   fenster[39][rand() % 15]=dudeSign;
             }
             for(int i=0; i<zei; i++){
                for(int j=0; j<spa; j++){
                   if(fenster[i][j]==dudeSign){
                      fenster[i][j]=' ';
                      dudeInt=rand() % 2;
                      if(j==playerx)
                         fenster[i-2][j]=dudeSign;
                      else if(dudeInt==0)
                         fenster[i-2][j-1]=dudeSign;
                      else
                         fenster[i-2][j+1]=dudeSign;
                   }
                }
   	         }
   		  }
          //Bäume erstellen
          if(state!=0 && state!=4){       // Kmh>0
             if(dist%10==0)
                fenster[39][rand() % 15]=treeSign1;
             for(int i=0; i<zei; i++){
                for(int j=0; j<spa; j++){
                   if(fenster[i][j]==treeSign1){
                      fenster[i][j]=' ';
                      fenster[i-1][j]=treeSign1;
                   }
                }
   	         }
   		  }
   		  //Steine erstellen
          if(state!=0 && state!=4){
             if(dist%53==0){
                fenster[39][rand() % 15]='.';
                if(height==8848 && dist<4000)
                   fenster[39][rand() % 15]='.';
             }
             for(int i=0; i<zei; i++){
                for(int j=0; j<spa; j++){
                   if(fenster[i][j]=='.'){
                      fenster[i][j]=' ';
                      fenster[i-1][j]='.';
                   }
                }
   	         }
   		  }
   		  //Bäume2 erstellen
          if(state!=0 && state!=4){
             if(dist%23==0)
                fenster[39][rand() % 15]=treeSign2;
             for(int i=0; i<zei; i++){
                for(int j=0; j<spa; j++){
                   if(fenster[i][j]==treeSign2){
                      fenster[i][j]=' ';
                      fenster[i-1][j]=treeSign2;
                   }
                }
   	         }
   		  }
   		  //skier erstellen
          if(dist>0){       // Kmh>0
             if(Kmh>0){
                if(dist%612==0){
                   skier = rand() % 15;
                   fenster[1][skier]='|';
                   fenster[1][skier+1]='|';
                }
             }
             for(int i=zei; i>0; i--){
                for(int j=spa; j>0; j--){
                   if(fenster[i][j]=='|'){
                      fenster[i][j]=' ';
                      fenster[i+1][j]='|';
                   }
                }
   	         }
   		  }
   		  
   		  //Hindernisse
   		  if(state==0 && fenster[playery][playerx-1]!=' ' || state==4 && fenster[playery][playerx+1]!=' ' || state==0 && fenster[playery+1][playerx-1]!=' ' || state==4 && fenster[playery+1][playerx+1]!=' '){
             leben--;
             Kmh=0;
             fenster[playery-1][playerx+1]='o';
             fenster[playery-1][playerx+2]='u';
             fenster[playery-1][playerx+3]='c';
             fenster[playery-1][playerx+4]='h';
             fenster[playery-1][playerx+5]='!';
             if(musicOn==true){
                Beep(1000,1000);
             }
             gotMessage=true;
             if(state==0){
                fenster[playery][playerx-1]=' ';
                fenster[playery+1][playerx-1]=' ';
             }
             if(state==4){
                fenster[playery][playerx+1]=' ';
                fenster[playery+1][playerx+1]=' ';
             }
          }
   		  if(state==2 && fenster[playery+1][playerx]!=' ' || state==2 && fenster[playery+1][playerx+1]!=' '){
             leben--;
             Kmh=0;
             fenster[playery-1][playerx+1]='o';
             fenster[playery-1][playerx+2]='u';
             fenster[playery-1][playerx+3]='c';
             fenster[playery-1][playerx+4]='h';
             fenster[playery-1][playerx+5]='!';
             if(musicOn==true){
                Beep(1000,1000);
             }
             gotMessage=true;
          }
          if(state==3 && fenster[playery+1][playerx+1]!=' ' || state==3 && fenster[playery+1][playerx+2]!=' '){
             leben--;
             Kmh=0;
             fenster[playery-1][playerx+1]='o';
             fenster[playery-1][playerx+2]='u';
             fenster[playery-1][playerx+3]='c';
             fenster[playery-1][playerx+4]='h';
             fenster[playery-1][playerx+5]='!';
             if(musicOn==true){
                Beep(1000,1000);
             }
             gotMessage=true;
          }
          if(state==1 && fenster[playery+1][playerx-1]!=' ' || state==1 && fenster[playery+1][playerx]!=' '){
             leben--;
             Kmh=0;
             fenster[playery-1][playerx+1]='o';
             fenster[playery-1][playerx+2]='u';
             fenster[playery-1][playerx+3]='c';
             fenster[playery-1][playerx+4]='h';
             fenster[playery-1][playerx+5]='!';
             if(musicOn==true){
                Beep(1000,1000);
             }
             gotMessage=true;
          }
          if(timecount==0){       
             timecount=60;
             leben--;
             fenster[playery-1][playerx+1]='f';
             fenster[playery-1][playerx+2]='a';
             fenster[playery-1][playerx+3]='s';
             fenster[playery-1][playerx+4]='t';
             fenster[playery-1][playerx+5]='e';
             fenster[playery-1][playerx+6]='r';
             fenster[playery-1][playerx+7]='!';
             if(musicOn==true){
                Beep(1000,1000);
             }
             gotMessage=true;
          }
          if(fenster[playery-1][playerx+5]=='*')
             leben=0;
             
          //Fenster ausgeben
          for(int i=0; i<zei; i++){
             cout << endl;
             for(int j=0; j<spa; j++){
                /*if(i==zei-1 && j==spa-1)
                   break;*/
                if(fenster[i][j]=='*'){
                     if(state==1)
                        cout << "/";
                     if(state==2)
                        cout << "|";
                     if(state==3)
                        cout << ski;
                     if(state==0 || state==4)
                        cout << "_";
                }
                if(fenster[i][j-1]=='*'){
                     if(state==1)
                        cout << "/";
                     else if(state==2)
                        cout << "|";
                     else if(state==3)
                        cout << ski;
                     else
                        cout <<  fenster[i][j];
                }
                if(fenster[i-1][j]=='*'){
                     if(state==0 || state==4)
                        cout << "_";
                     else
                        cout <<  fenster[i][j];
                }
                if(fenster[i][j]!='*' && fenster[i][j-1]!='*' && fenster[i-1][j]!='*')
                   cout <<  fenster[i][j];
                }
   		  }
   		  fenster[playery][playerx]=' ';
   		  
   		  //Controls
   		  if(GetAsyncKeyState(0x41)){//a
             state--;
          }
          if(GetAsyncKeyState(0x44)){//d
             state++;
          }
          if(GetAsyncKeyState(0x53)){//s   
             Kmh++;                        //!!!
          }
          if(state<0)
             state=0;
          if(state>4)
             state=4;
             
          //States, ausführen
          if(state==2){
              Kmh++;   
              Kmh++;   
          }
          if(state==1){
             --playerx;
              Kmh++;  
          }
          if(state==3){
             ++playerx;
              Kmh++; 
          }
          if(state==0){
             Kmh=Kmh/2;
             if (Kmh>0)
                --playerx;
          }        
          if(state==4){
             Kmh=Kmh/2;
             if (Kmh>0)
                ++playerx;
          }

          if(maxKmh<Kmh){
             maxKmh=Kmh;
          }
          
          if(timecount>1000000)
             timecount=0;

          if(Kmh<100 && soundOn==true){
             Beep(100+Kmh,100-Kmh);     //37 - 32,767 //  - 300       300-Kmh
          }   
          if(Kmh<100 && soundOn==false){
             Sleep(100-Kmh);
          }
          if(Kmh<1000)
             Sleep(1);
          system ("cls");
          
        }
        bool errorOccurred=false;
        if (dist>30000)
           errorOccurred=true;
           
        UhrTickt=false;
        CloseHandle(hThread);         //destroy the thread object (make sure the thread is done at this point)
        
        score=win(height, score, maxKmh, errorOccurred);
        
        return score;
    }
          
    int gameIntro(string Berg, int hoehe, string range, string ort, int score){
          system ("cls");
          system("COLOR A0");
          HWND console = GetConsoleWindow();
          RECT r;
          GetWindowRect(console, &r);
          add_scrollbar();
          MoveWindow(console, r.left, r.top, 470, 460, TRUE);  //462, 460
          remove_scrollbar();
         
         char ski=92;
         
         cout << "\n " << Berg;
         cout << "\n Height   " << hoehe << " m.";
         cout << "\n " << ort;
         cout << "\n " << range;
                 
         char berg[27][53]={
'+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ','/',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ','/',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',' ',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ','/',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','_',' ',' ','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,' ',' ','/',' ',' ',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',' ',' ',ski,'~','~','~','~','~','~','~','~','~','~','~','/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','/',' ',' ',' ',' ',' ',ski,'.','.','.','.','.','.','.','.','.','/','~','~','~','~','~','~','~','~','~','~','~','~','~',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ',' ','/','~','~','~','~','~','~','~',ski,'.','.','.','.','.','.','.','/','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ',' ','/','.','.','.','.','.','.','.','.','.',ski,'.','.','.','.','.','/','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,' ',' ',' ',' ',' ',' ',' ',' ','|',
'|',' ',' ',' ',' ',' ',' ',' ','/','.','.','.','.','.','.','.','.','.','.','.',ski,'.','.','.','/','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,' ',' ',' ',' ',' ',' ',' ','|',
'|','-','-','-','-','-','-','/','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,'.','/','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,'-','-','-','-','-','-','|',
'|','^','^','^','^','^','/','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,'^','^','^','^','^','|',
'|','^','^','^','^','/','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',ski,'^','^','^','^','|',
'|','^','^','a','g','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','a','a','a','a','g','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','a','a','a','g','^','^','|',
'|','^','d','8','a','a','a','a','a','a','g','.','.','.','.','.','.','a','a','a','a','a','d','8','8','8','a','a','a','a','a','a','a','a','g','.','a','a','a','a','a','a','a','a','a','d','8','8','8','8','b','^','|',
'|','^','Y','8','8','8','8','8','8','a','a','a','a','a','a','a','d','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','a','a','d','8','8','8','8','8','8','8','8','8','8','8','8','8','8','P','^','|',
'|','^','^','Y','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','z','z','Y','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','8','z','z','z','s','^','^','|',
'|','^','^','^','z','z','z','z','Y','8','8','8','8','8','8','8','8','z','z','z','z','z','z','z','s','^','z','z','z','z','z','z','Y','8','8','8','z','z','z','z','z','z','z','z','z','z','z','s','^','^','^','^','|',
'|','^','^','^','^','^','^','^','^','z','z','z','z','z','z','z','z','z','s','^','^','^','^','^','^','^','^','^','^','^','^','^','^','z','z','z','z','s','^','^','^','^','^','^','^','^','^','^','^','^','^','^','|',
'|','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','|',
'|','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','|',
'|','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','|',
'|','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','^','|',
'+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+',
};
for(int i=0; i<27; i++){
cout << endl;
for(int j=0; j<53; j++)
cout <<  berg[i][j];
}
                 
         Sleep(4500);  
         int Kmh=0;
         score=game(hoehe, Kmh, score);   
         
         return score;     
    }
    
    void gameManager(){
          system ("cls");
         string achter[14] = {"K2", "Kangchenjunga", "Lhotse", "Makalu", "Cho Oyu", "Dhaulagiri", "Manaslu", "Nanga Parbat", "Annapurna", "Gasherbrum I", "Broad Peak", "Gasherbrum II", "Shishapangma"};
         int heightAchter[14]={8611, 8586, 8516, 8462, 8201, 8167, 8156, 8125, 8091, 8068, 8047, 8035, 8012};
         string rangeAchter[14]={"Karakoram", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Karakoram", "Karakoram", "Karakoram", "Himalayas"};
         string locationAchter[14]={"China/Pakistan (GilgitBaltistan)  The 'Savage Mountain'.", "Nepal/India  Considered to be highest until 1849.", "Highest peak in India.", "Nepal/China (Tibet)  Climbers ascend Lhotse Face in climbing Everest", "Nepal/China (Tibet)", "Nepal/China (Tibet)  Considered 'easiest'eight-thousander", "Nepal  Presumed world's highest from 1808-1838", "Nepal", "Pakistan", "Nepal  First eight-thousander to be climbed (1950)", "China/Pakistan  Originally named K5", "China/Pakistan  Originally named K3", "China/Pakistan  Originally named K4", "China (Tibet)"};
    
         string siebener[102]={"Gyachung Kang", "Gasherbrum III", "Annapurna II", "Gasherbrum IV", "Himalchuli", "Distaghil Sar", "Ngadi Chuli", "Nuptse", "Khunyang Chhish", "Masherbrum", "Nanda Devi", "Chomo Lonzo", "Batura Sar", "Kanjut Sar", "Rakaposhi", "Namcha Barwa", "Batura II", "Kamet", "Saltoro Kangri", "Batura III", "Kongur Tagh", "Jannu", "Molamenqing", "Gurla Mandhata", "Tirich Mir", "Saser Kangri", "Chogolisa", "Shispare", "Changtse", "Trivor", "Gangkhar Puensum", "Gongga Shan", "Annapurna III", "Kula Kangri", "Chogolisa II", "Muztagh Ata", "Skyang Kangri", "Yukshin Gardan Sar", "Annapurna IV", "Mamostong Kangri", "Ismoil Somoni Peak", "Noshaq", "Pumari Chhish", "Passu Sar", "Malubiting", "Gangapurna", "Jengish Chokusu", "K12", "Istor-o-Nal", "Ghent Kangri", "Haramosh Peak", "Kabru", "Ultar", "Rimo I", "Sherpi Kangri", "Labuche Kang", "Kirat Chuli", "Skil Brum", "Gimmigela Chuli", "Bojohagur Duanasir", "Chamlang", "Jomolhari / Chomolhari", "Baltoro Kangri", "Siguang Ri", "The Crown", "Gyala Peri", "Porong Ri", "Baintha Brakk", "Yutmaru Sar", "K6", "Kangpenqing", "Mana Peak", "Muztagh Tower", "Diran", "Apsarasas Kangri", "Langtang Lirung", "Khartaphu", "Tongshanjiabu", "Langtang Ri", "Kangphu Kang", "Annapurna South", "Melungtse", "Liushi Shan", "Baruntse", "Pumori", "Nemjung", "Udren Zom", "Nun Kun", "Tilicho Peak", "Gauri Sankar", "Lenin Peak", "Api", "Pauhunri", "Korzhenevskaya", "Lunpo Gangri", "Dunagiri", "Kangto", "Nyegyi Kansang", "Kezhen Peak", "Shah Dhar", "Spantik", "Khan Tengri"};
         int heightSiebener[102]={7952, 7946, 7937, 7932, 7893, 7885, 7871, 7861, 7852, 7821, 7816, 7804, 7795, 7790, 7788, 7782, 7762, 7756, 7742, 7729, 7719, 7710, 7710, 7694, 7690, 7672, 7665, 7611, 7583, 7577, 7570, 7556, 7555, 7554, 7554, 7546, 7545, 7530, 7525, 7516, 7495, 7492, 7492, 7476, 7458, 7455, 7439, 7428, 7403, 7401, 7397, 7394, 7388, 7385, 7380, 7367, 7365, 7360, 7350, 7329, 7319, 7314, 7312, 7308, 7295, 7294, 7292, 7285, 7283, 7282, 7281, 7272, 7273, 7257, 7245, 7227, 7213, 7207, 7205, 7204, 7219, 7181, 7167, 7162, 7161, 7140, 7140, 7135, 7134, 7134, 7134, 7132, 7128, 7105, 7095, 7066, 7060, 7047, 7038, 7038, 7027, 7010};
         string rangeSiebener[102]={"Himalayas", "Karakoram", "Himalayas", "Karakoram", "Himalayas", "Karakoram", "Himalayas", "Himalayas", "Karakoram", "Karakoram", "Himalayas", "Himalayas", "Karakoram", "Karakoram", "Karakoram", "Himalayas", "Karakoram", "Himalayas", "Karakoram", "Karakoram", "Kunlun Mountains", "Himalayas", "Himalayas", "Himalayas (Nalakankar)", "Hindu Kush", "Karakoram", "Karakoram", "Karakoram", "Himalayas", "Karakoram", "Himalayas", "Daxue Shan", "Himalayas", "Himalayas", "Karakoram", "Kongur Tagh", "Karakoram", "Karakoram", "Himalayas", "Karakoram", "Pamir Mountains", "Hindu Kush", "Karakoram", "Karakoram", "Karakoram", "Annapurna Himalaya", "Tian Shan", "Karakoram", "Hindu Kush", "Karakoram", "Karakoram", "Himalayas", "Karakoram", "Karakoram", "Karakoram", "Himalayas", "Himalayas", "Karakoram", "Himalayas", "Karakoram", "Himalayas", "Himalayas", "Karakoram", "Himalayas", "Karakoram", "Himalayas", "Himalayas", "Karakoram", "Karakoram", "Karakoram", "Himalayas", "Himalayas", "Karakoram", "Karakoram", "Karakoram", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Himalayas", "Rolwaling Himalayas", "Kunlun", "Himalayas", "Himalayas", "Himalayas", "Hindu Kush", "Karakoram", "Himalayas", "Rolwaling Himalayas", "Pamir Mountains", "Himalayas", "Himalayas", "Pamir Mountains", "Himalayas (Gangdise)", "Himalayas", "Himalayas", "Himalayas", "Karakoram", "Hindu Kush", "Karakoram", "Tian Shan"};
         string locationSiebener[102]={"Nepal (Khumbu)/China (Tibet)", "China/Pakistan", "Nepal", "China/Pakistan", "Manaslu, Nepal", "Pakistan", "Manaslu, Nepal", "Everest Massif, Nepal", "Pakistan", "Pakistan  Originally named K1", "India (Uttarakand)  #2 in India", "Makalu Massiff, Nepal/China (Tibet)", "Pakistan", "Pakistan", "Pakistan", "China (Tibet)", "Pakistan", "India (Uttarakand)", "Kashmir, Pakistan/India", "Pakistan", "China  Possibly 7649? metres", "Kangchenjunga, Nepal", "Shishapangma group, China (Tibet)", "China (Tibet)", "Pakistan  #1 in Hindu Kush", "India", "Pakistan", "Pakistan", "Everest Massif, China (Tibet)", "Pakistan", "Bhutan/China (Tibet)", "Sichuan, China", "Nepal", "China (Tibet) (possibly also Bhutan)", "Pakistan", "China (Xinjiang)", "Pakistan/China", "Pakistan", "Nepal", "Kashmir, India", "Tajikistan", "Afghanistan  #1 in Afghanistan", "Pakistan", "Pakistan", "Pakistan", "Nepal", "China/Kyrgyzstan  #1 in Tian Shan", "Pakistan", "Pakistan", "Pakistan", "Pakistan", "Kanchenjunga, India/Nepal", "Pakistan", "India", "India", "near Cho Oyu, Nepal/China (Tibet)", "Nepal/India border", "Pakistan  May also be given as 7,410 m", "Nepal/India border", "Pakistan", "Khumbu, Nepal", "Bhutan/China (Tibet)", "Pakistan", "China (Tibet)", "China (Xinjiang)", "China (Tibet)", "China (Tibet)", "Pakistan", "Pakistan", "Pakistan  Also known as Baltistan Peak", "China (Tibet)", "India (Uttarakand)  SSE of Kamet", "Pakistan", "Pakistan", "China/Pakistan", "Nepal", "China (Tibet)", "Bhutan/China", "Nepal/China (Tibet)", "Bhutan/China", "Nepal", "China (Tibet)", "China  #1 in Kunlun", "Khumbu, Nepal", "Khumbu, Nepal", "Nepal", "Pakistan", "India", "Annapurna Himal, Nepal", "Nepal/China (Tibet)", "Tajikistan-Kyrgyzstan  #2 in Pamirs", "Nepal", "India/China (Tibet)", "Tajikistan  #3 in Pamirs", "China (Tibet)", "India (Uttarakand)", "India/China (Tibet)", "India/China (Tibet)", "China (Xinjiang)", "Afghanistan/Pakistan", "Pakistan", "Kyrgyzstan-Kazakhstan  #2 in Tian Shan"};
    
         string sechser[73]={"Machapuchare", "Kang Guru", "Avicenna Peak", "Ulugh Muztagh", "Aconcagua", "Lunkho e Dosare", "Ojos del Salado", "Siniolchu", "Nanda Kot", "Angel Sar", "Chongra Peak", "Ama Dablam", "Monte Pissis", "Biarchedi", "Huascarán Sur", "Nevado Tres Cruces", "Kawagarbo", "Llullaillaco", "Cho Polu", "Mount Pandim", "Num Ri", "Gul Lasht Zom", "Huascarán Norte", "Khumbutse", "Mount Kailash", "Yerupajá", "Thamserku", "Incahuasi", "Manirang", "Nilkantha", "Phuparash Peak", "Sickle Moon Peak", "Buni Zom", "Nevado Sajama", "Singu Chuli", "Taboche", "Cerro El Muerto", "Mera Peak", "Illimani", "Hiunchuli", "Cholatse", "Ancohuma", "Coropuna", "Antofalla", "Huandoy", "Illampu", "Kusum Kangguru", "Kinnaur Kailash", "Parinaquta", "Siula Grande", "Bamba Dhura", "Ampato", "Amne Machin", "Pomerape", "Salcantay", "Chimborazo", "Mount McKinley", "Kongde Ri", "Aucanquilcha", "Imja Tse", "Stok Kangri", "Pisang Peak", "Huayna Potosí", "Aracar", "Chachakumani", "Chachani", "Acotango", "Socompa", "Acamarachi", "Mitre Peak", "Wallqa Wallqa", "Uturunku"};
         int heightSechser[73]={6993, 6981, 6974, 6973, 6962, 6901, 6891, 6888, 6861, 6858, 6830, 6812, 6795, 6781, 6768, 6749, 6740, 6739, 6735, 6691, 6677, 6657, 6655, 6640, 6638, 6635, 6623, 6621, 6597, 6596, 6574, 6574, 6551, 6542, 6501, 6501, 6488, 6476, 6462, 6441, 6440, 6427, 6425, 6409, 6395, 6368, 6367, 6349, 6348, 6344, 6334, 6288, 6282, 6282, 6271, 6267, 6168, 6187, 6176, 6160, 6137, 6091, 6088, 6082, 6074, 6057, 6052, 6051, 6046, 6010, 6025, 6020};
         string locationSechser[73]={"Annapurna Himalaya, Nepal  Officially unclimbed (attempts not allowed)", "Manaslu Himalaya, Nepal  2005 avalanche kills 18", "Pamir Mountains, Tajikistan  #3 in Pamirs", "Kunlun Mountains, Tibet  Often misquoted as 7,723 m", "Andes, Argentina  Highest in both the Western and Southern Hemispheres", "Hindu Kush, Afghanistan-Pakistan", "Andes, Argentina-Chile  Highest volcano on Earth", "Kangchenjunga Himalaya, India", "Kumaon Himalayas, India", "Karakoram, Pakistan", "Nanga Parbat Himalaya, Pakistan", "Himalayas, Nepal (Khumbu)", "Andes, Argentina  Third highest in Western Hemisphere", "Karakoram, Pakistan", "Andes, Peru  Highest", "Andes, Argentina/Chile", "Himalayas, China (Yunnan/Tibet)", "Andes, Argentina/Chile", "Himalayas, Nepal (Khumbu)", "Himalayas, India (Sikkim)", "Himalayas, Nepal (Khumbu)", "Hindu Kush, Pakistan", "Andes, Peru", "Himalayas, Nepal (Khumbu)/China (Tibet)  First peak west of Everest", "Transhimalaya, western Tibet  Officially unclimbed (attempts not allowed)", "Andes, Peru", "Himalayas, Nepal (Khumbu)", "Andes, Argentina/Chile", "Himalayas, India (Himachal Pradesh)", "Himalayas, India (Uttarakhand)", "Karakoram, Pakistan", "Himalayas, Kashmir, India", "Hindu Kush, Pakistan", "Andes, Bolivia  Highest", "Annapurna Himalayas, Nepal", "Himalayas, Nepal (Khumbu)", "Andes, Argentina/Chile", "Himalayas, Nepal (Khumbu)", "Andes, Bolivia", "Annapurna Himalaya, Nepal", "Himalayas, Nepal (Khumbu)", "Andes, Bolivia", "Andes, Peru", "Andes, Argentina", "Andes, Peru", "Andes, Bolivia", "Himalayas, Nepal (Khumbu)", "Himalayas, Kinnaur, India", "Andes, Bolivia/Chile", "Andes, Peru", "Uttarakhand Himalayas, India", "Andes, Peru", "Kunlun Mountains, China (Qinghai)", "Andes, Bolivia/Chile", "Andes, Peru", "Ecuador  Furthest point from Earth's center", "Alaska Range, United States (Alaska)  Highest in North America", "Himalayas, Nepal (Khumbu)", "Andes, Chile", "Himalayas, Nepal (Khumbu)", "Stok Range, Himalayas, India", "Annapurna Himalaya, Nepal", "Andes, Bolivia", "Andes, Argentina", "Andes, Bolivia", "Andes, Peru", "Andes, Bolivia/Chile", "Andes, Argentina/Chile", "Andes, Chile", "Karakoram, Pakistan", "Andes, Peru", "Andes, Bolivia"};
    
         string fuenfer[58]={"Mount Logan", "Alpamayo", "Cerro Lípez", "Licancabur", "Cotopaxi", "Mount Kilimanjaro", "Hkakabo Razi", "El Misti", "Cayambe", "Pico Cristóbal Colón", "Antisana", "Nevado Pisco", "Nevado Anallajsi", "Pokalde", "Ubinas", "Mount Elbrus", "Mehrbani Peak", "Pico de Orizaba", "Mount Damavand", "Nevado Mismi", "Jade Dragon Snow Mountain", "Lascar Volcano", "Kala Patthar", "Mount Saint Elias", "Concord Peak", "Machoi Peak", "El Plomo", "Bogda Feng", "Popocatépetl", "Kolahoi Peak", "Chacaltaya", "Haba Xueshan", "Nevado del Ruiz", "El Altar", "Mount Foraker", "Mount Haramukh", "Maipo", "Illiniza", "Sirbal Peak", "Sangay", "Iztaccíhuatl", "Mount Lucania", "Dykh-Tau", "Shkhara", "Mount Kenya", "Malika Parbat", "Amarnath Peak", "King Peak", "Boris Yeltsin Peak", "Koshtan-Tau", "Mount Ararat", "Mount Stanley", "Mount Steele", "Janga", "Mount Kazbek", "Tungurahua", "Carihuairazo", "Mount Bona"};
         int heightFuenfer[58]={5959, 5947, 5929, 5920, 5897, 5895, 5881, 5822, 5790, 5776, 5753, 5752, 5750, 5745, 5672, 5642, 5639, 5636, 5610, 5597, 5596, 5592, 5545, 5489, 5469, 5458, 5450, 5445, 5426, 5425, 5421, 5396, 5389, 5320, 5304, 5300, 5264, 5248, 5236, 5230, 5230, 5226, 5205, 5201, 5199, 5190, 5186, 5173, 5168, 5150, 5137, 5109, 5073, 5051, 5047, 5023, 5018, 5005};
         string rangeFuenfer[58]={"Saint Elias Mountains", "Andes", "Andes", "Andes", "Andes", "-", "Himalayas", "Andes", "Andes", "Sierra Nevada de Santa Marta", "Andes", "Andes", "Andes", "Khumbu Himalayas", "Andes", "Caucasus Mountains", "Karakoram", "Trans-Mexican Volcanic Belt", "Alborz", "Andes", "Hengduan Mountains", "Andes", "Khumbu Himalayas", "Saint Elias Mountains", "Pamir Mountains", "Himalaya", "Andes", "Tien Shan", "Trans-Mexican Volcanic Belt", "Himalaya", "Andes", "Himalaya", "Andes", "Andes", "Alaska Range", "Himalaya", "Andes", "Andes", "Himalaya", "Andes", "Trans-Mexican Volcanic Belt", "Saint Elias Mountains", "Caucasus Mountains", "Caucasus Mountains", "-", "Himalaya", "Himalaya", "Saint Elias Mountains", "Teskey Ala-Too", "Caucasus Mountains", "-", "Ruwenzori Mountains", "Saint Elias Mountains", "Caucasus Mountains", "Caucasus Mountains", "Andes", "Andes", "Saint Elias Mountains"};
         string locationFuenfer[58]={"Yukon, Canada  Highest in Canada", "Peru", "Bolivia", "Bolivia/Chile", "Ecuador  Second highest in Ecuador", "Tanzania  Highest in Africa", "Myanmar  Highest in Southeast Asia", "Peru", "Ecuador  Third highest in Ecuador", "Colombia  Highest coastal mountain", "Ecuador", "Peru", "Bolivia", "Nepal  7 km SW of Everest", "Peru  Active volcano (2006)", "North Caucasus, Russia  Highest in Caucasus", "Pakistan", "Mexico  Highest in Mexico", "Iran  Highest in Iran and ME, highest volcano in Asia", "Peru  Glacial source of the Amazon River", "Yunnan, China", "Chile", "Nepal  Popular trekking peak", "Yukon, Canada/Alaska, USA  Second highest in both countries", "AfghanistanTajikistan", "Kashmir", "Chile", "Xinjiang, China", "Mexico  Second highest in Mexico", "Highest in Kashmir Valley", "Bolivia", "Yunnan, China", "Colombia  23,000 people died in 1985 eruption", "Ecuador", "Alaska, USA", "Kashmir valley", "Argentina/Chile", "Ecuador", "Kashmir Valley, India", "Ecuador", "Mexico  Third highest in Mexico", "Yukon, Canada  Third highest in Canada", "North Caucasus, Russia  Second highest in the Caucasus", "Georgia  Highest in Georgia", "Kenya  Highest in Kenya", "Kaghan Valley, Pakistan|Highest in Kaghan Valley of Pakistan", "Kashmir Valley, India", "Yukon, Canada  Fourth highest in Canada", "Kyrgyzstan", "North Caucasus, Russia", "Turkey  Highest in Turkey", "Congo/Uganda  Third highest in Africa", "Yukon, Canada  Fifth highest in Canada", "Georgia / North Caucasus, Russia  Second highest in Georgia", "Georgia  Third highest in the country", "Ecuador  Active volcano", "Ecuador", "Alaska, USA  Also given as 5,030 m or 5,045m"};
         
         string vierer[250]={"Mount Blackburn", "Pico Bolívar", "Pik Talgar", "Mount Sanford", "Pico Humboldt", "Vinson Massif", "Pico Bonpland", "Puncak Jaya", "Pico La Concha", "Gistola", "Shota Rustaveli Peak", "Tetnuldi", "Mount Tyree", "Huaynaputina", "Alam Kuh", "Mount Wood", "Mount Vancouver", "Sabalan", "Mont Blanc", "Corazón", "Pichincha", "Jimara", "Mount Churchill", "Puncak Mandala", "Klyuchevskaya Sopka", "Puncak Trikora", "Mont Blanc de Courmayeur", "Sunset Peak", "Mount Slaggard", "Pico Piedras Blancas", "Pico El Toro", "Tatakooti Peak", "Rumiñahui", "Pico El Leon", "Ushba", "Volcán Domuyo", "Pico Los Nevados", "Pico Pan de Azucar", "Naltar Peak", "Mount Fairweather", "Pico Mucuñuque", "Pico El Buitre", "Sierra Negra", "Monte Rosa", "Nordend", "Mount Hubbard", "Nevado de Toluca", "Mount Meru", "Zumsteinspitze", "Dom", "Ras Dashen", "Signalkuppe", "Lyskamm", "Mount Bear", "Mount Wilhelm", "Mount Karisimbi", "Mount Walsh", "Belukha Mountain", "Weisshorn", "Tebulosmta", "Täschhorn", "Bazarduzu Dagi", "Matterhorn", "Mount Rutford", "Mont Maudit", "Babis Mta", "Mount Shani", "Dena", "Vladimir Putin Peak", "Mount Hunter", "Mount Whitney", "Mount Alverstone", "University Peak", "Aello Peak", "Mount Elbert", "Mount Massive", "Mount Harvard", "Mount Rainier", "Kholeno", "Mount Williamson", "Tavan Bogd Uul", "Blanca Peak", "La Plata Peak", "Mount Giluwe", "Burchula", "Uncompahgre Peak", "Dent Blanche", "Crestone Peak", "Mount Lincoln", "Azad Kuh", "Grays Peak", "Mount Evans", "Quandary Peak", "Lalveri", "Mount Antero", "Torreys Peak", "Castle Peak", "Longs Peak", "McArthur Peak", "Mount Wilsion", "White Mountain Peak", "North Palisade", "Mount Shavano", "Colima", "Crestone Needle", "Mount Belford", "Mount Princeton", "Mount Shasta", "Mount Elgon", "Mount Bross", "Kit Carson Mountain", "Mount Wrangell", "Maroon Peak", "Tabeguache Peak", "El Diente Peak", "Mount Sill", "Grand Combin", "Mount Oxford (Colorado)", "Mount Sneffels", "Mount Democrat", "Capitol Peak", "Pikes Peak", "Snowmass Mountain", "Lenzspitze", "Mount Russell", "Mount Eolus", "Windom Peak", "Challenger Point", "Mount Columbia", "Mount Adishi", "Mount Augusta", "Humboldt Peak (Colorado)", "Split Mountain", "Mount Bierstadt", "Diklosmta", "Sunlight Peak", "Missouri Mountain", "Culebra Peak", "Handies Peak", "Ellingwood Point", "Mount Lindsey", "Little Bear Peak", "Mount Sherman", "Redcloud Peak", "Galeras", "Mount Langley", "Finsteraarhorn", "Pyramid Peak", "Mount Tyndall", "Wilson Peak", "Mount Muir", "San Luis Peak", "Wetterhorn Peak", "Middle Palisade", "Huron Peak", "Mount of the Holy Cross", "Thunderbolt Peak", "Sunshine Peak", "Mount Strickland", "Pigeon Peak", "Mount Kennedy", "Pointe Bayeux", "Mont Blanc du Tacul", "Stecknadelhorn", "Avalanche Peak", "Zinalrothorn", "Volcán Tajumulco", "Hohberghorn", "Turret Peak", "Mount Darwin", "Mount Hayes", "Sacabaya", "Grandes Jorasses", "Gannett Peak", "Mauna Kea", "Alphubel", "Mauna Kea", "Cofre de Perote", "Zard-Kuh", "Shah Alborz", "Rimpfischhorn", "Grand Teton", "Mount Cook", "Aletschhorn", "Strahlhorn", "Fremont Peak", "Mount Warren", "Mount Sidley", "Dent d'Hérens", "Mauna Loa", "Jbel Toubkal", "Mount Minto", "Breithorn", "Jungfrau", "Bishorn", "Mount Helen", "El Mela", "Mount Quincy Adams", "Doublet Peak", "Turret Peak", "Mount Parnassus (Colorado)", "Uludoruk (Resko / Gelyasin)", "Mount Sacagawea", "Mount Dubois", "Kings Peak", "Aiguille Verte", "Mount Bangeta", "Mount Dickerson", "Jackson Peak", "Mount Woodrow Wilson", "Aiguilles du Diable", "Bastion Peak", "Aiguille Blanche de Peuterey", "Mönch", "Mount Febbas", "Barre des Écrins", "Mount Aragats", "Mount Cameroon", "Mount Kinabalu", "Grizzly Peak D", "Pollux", "Kilauea", "Mount Wade", "Mount Victoria", "Centennial Peak", "Gran Paradiso", "Ober Gabelhorn", "Piz Bernina", "Fiescherhorn", "Grünhorn", "Lauteraarhorn", "Aiguille du Géant", "Mount Sniktau", "Allalinhorn", "Wind River Peak", "Latsga", "Weissmies", "Mount Waddington", "Mount Marcus Baker", "Dôme de neige des Écrins", "Conejos Peak", "Dent du Géant", "Red Slate Mountain", "Cloud Peak", "Wheeler Peak", "Lagginhorn", "Twilight Peak", "Francs Peak", "Mount Walter", "Les Droites"};
         int heightVierer[250]={4996, 4981, 4979, 4949, 4940, 4892, 4890, 4884, 4870, 4860, 4860, 4858, 4852, 4850, 4850, 4842, 4812, 4811, 4810, 4790, 4784, 4780, 4766, 4760, 4750, 4750, 4748, 4745, 4742, 4740, 4730, 4725, 4721, 4720, 4710, 4709, 4700, 4680, 4678, 4663, 4660, 4650, 4640, 4634, 4609, 4577, 4577, 4566, 4563, 4545, 4533, 4527, 4527, 4521, 4509, 4507, 4507, 4506, 4506, 4493, 4491, 4485, 4478, 4477, 4465, 4454, 4451, 4448, 4446, 4442, 4421, 4420, 4411, 4403, 4402, 4395, 4395, 4392, 4387, 4382, 4374, 4374, 4370, 4368, 4364, 4361, 4357, 4357, 4354, 4355, 4350, 4350, 4350, 4350, 4349, 4349, 4348, 4345, 4344, 4342, 4342, 4341, 4337, 4330, 4327, 4327, 4327, 4322, 4321, 4320, 4318, 4317, 4315, 4315, 4315, 4314, 4313, 4313, 4312, 4312, 4307, 4302, 4295, 4294, 4296, 4292, 4292, 4292, 4291, 4290, 4290, 4287, 4287, 4286, 4285, 4285, 4282, 4282, 4281, 4280, 4280, 4279, 4278, 4277, 4276, 4275, 4274, 4273, 4273, 4272, 4272, 4271, 4271, 4271, 4269, 4269, 4268, 4268, 4260, 4259, 4250, 4258, 4248, 4241, 4228, 4221, 4220, 4219, 4217, 4216, 4216, 4215, 4208, 4208, 4207, 4206, 4205, 4201, 4200, 4200, 4199, 4199, 4196, 4192, 4190, 4189, 4182, 4181, 4171, 4171, 4167, 4165, 4165, 4158, 4153, 4151, 4150, 4150, 4145, 4145, 4137, 4137, 4136, 4135, 4125, 4122, 4121, 4120, 4120, 4115, 4014, 4113, 4112, 4107, 4105, 4102, 4095, 4095, 4095, 4093, 4092, 4091, 4085, 4072, 4070, 4061, 4053, 4049, 4049, 4043, 4042, 4035, 4034, 4027, 4021, 4019, 4017, 4016, 4016, 4015, 4015, 4013, 4013, 4013, 4012, 4010, 4010, 4009, 4005, 4000};
         string locationVierer[250]={"Wrangell Mtns., Alaska, USA (also given 5036 m)", "Sierra Nevada de Mérida, Andes, Venezuela  Highest in Venezuela", "Tian Shan, Kazakhstan  Highest in northern Tian Shan", "Wrangell Mtns., Alaska, USA", "Sierra Nevada de Mérida, Andes, Venezuela", "Sentinel Range, Ellsworth Mountains, Antarctica  Highest in Antarctica", "Sierra Nevada de Mérida, Andes, Venezuela", "Sudirman Range, Papua, Indonesia  Highest in Indonesia", "Sierra Nevada de Mérida, Andes, Venezuela", "Caucasus Mountains, Svaneti, Georgia", "Caucasus Mountains, Svaneti, Georgia/North Caucasus, Russia", "Caucasus Mountains, Svaneti, Georgia", "Sentinel Range, Ellsworth Mountains, Antarctica  Second Highest in Antarctica", "Andes, Peru", "Alborz, Iran  Second highest in Iran", "Saint Elias Mountains, Yukon, Canada", "Saint Elias Mountains, Yukon, Canada", "Iran", "Mont Blanc massif, France/Italy  Highest in Alps", "Andes, Ecuador", "Andes, Ecuador", "Khokh Range, Caucasus Mountains, Georgia", "Saint Elias Mountains, Alaska, USA", "Papua, Indonesia", "Kamchatka, Russia", "Papua, Indonesia", "Mont Blanc massif, France/Italy", "Himalaya, Kashmir Valley", "Saint Elias Mountains, Canada", "Sierra de la Culata, Andes, Venezuela", "Andes, Venezuela", "Himalaya, Kashmir Valley", "Andes, Ecuador", "Andes, Venezuela", "Caucasus Mountains, Svaneti, Georgia", "Andes, Argentina", "Andes, Venezuela", "Sierra de la Culata, Andes, Venezuela", "Pakistan", "Fairweather Range, Alaska, USA", "Andes, Venezuela", "Andes, Venezuela", "Mexico", "Switzerland  Highest point in Switzerland", "Pennine Alps, Switzerland-Italy", "Saint Elias Mountains", "Mexico", "Tanzania", "Pennine Alps, Switzerland-Italy", "Pennine Alps, Switzerland", "Ethiopia  Highest point in Ethiopia", "Pennine Alps, Switzerland-Italy", "Pennine Alps, Switzerland-Italy", "Saint Elias Mountains, Alaska, USA", "Papua, New Guinea", "Virunga Mountains, Rwanda/DRC", "Saint Elias Mountains, Canada", "Altay Mountains, Russia", "Pennine Alps, Switzerland", "Caucasus Mountains, Georgia/Chechnya, Russia", "Pennine Alps, Switzerland", "Azerbaijan", "Pennine Alps, Switzerland/Italy", "Sentinel Range, Ellsworth Mountains, Antarctica", "Mont Blanc massif, France/Italy", "Caucasus Mountains, Georgia/Russia", "Caucasus Mountains, Georgia/Russia", "Zagros Mountains Iran", "Kyrgyz Alatau, Kyrgyzstan", "Alaska Range, Alaska, USA", "Sierra Nevada, California, USA", "Saint Elias Mountains, Alaska, USA/Yukon, Canada", "Saint Elias Mountains, Alaska, USA", "Saint Elias Mountains, Alaska, USA", "Sawatch Range, Colorado, USA", "Sawatch Range, Colorado, USA", "Sawatch Range, Colorado, USA", "Cascades, Washington, USA", "Alborz, Iran", "Sierra Nevada, California, USA", "Bayan-Ölgii Province, Mongolia", "Rocky Mountains, Colorado, USA", "Sawatch Range, Colorado, USA", "Papua New Guinea", "Caucasus Mountains, Georgia", "San Juan Mountains, Colorado, USA", "Pennine Alps, Switzerland", "Sangre de Cristo Range, Colorado, USA", "Mosquito Range, Colorado, USA", "Alborz, Iran", "Front Range, Colorado, USA", "Front Range, Colorado, USA", "Tenmile Range, Colorado, USA", "Caucasus Mountains, Svaneti, Georgia", "Sawatch Range, Colorado, USA", "Front Range, Colorado, USA", "Elk Mountains, Colorado, USA", "Front Range, Colorado, USA", "Saint Elias Mountains, Yukon", "San Juan Mountains, Colorado, USA", "White Mountains, California, USA", "Sierra Nevada, California, USA", "Sawatch Range, Colorado, USA", "Mexico", "Sangre de Cristo Range, Colorado, USA", "Sawatch Range, Colorado, USA", "Sawatch Range, Colorado, USA", "California, USA", "Uganda-Kenya", "Mosquito Range, Colorado, USA", "Sangre de Cristo Range, Colorado, USA", "Alaska, USA", "Elk Mountains, Colorado, USA", "Sawatch Range, Colorado, USA", "San Juan Mountains, Colorado, USA", "Sierra Nevada, California, USA", "Pennine Alps, Switzerland", "Sawatch Range, Colorado, USA", "San Juan Mountains, Colorado, USA", "Mosquito Range, Colorado, USA", "Elk Mountains, Colorado, USA", "Colorado, USA", "Elk Mountains, Colorado, USA", "Pennine Alps, Switzerland", "Sierra Nevada, California, USA", "San Juan Mountains, Colorado, USA", "San Juan Mountains, Colorado, USA", "Sangre de Cristo Range, Colorado, USA", "Sawatch Range, Colorado, USA", "Caucasus Mountains, Svaneti, Georgia", "Saint Elias Mountains, Alaska, USA", "Sangre de Cristo Range, Colorado, USA", "Sierra Nevada, California, USA", "Front Range, Colorado, USA", "Caucasus Mountains, Tusheti, Georgia", "San Juan Mountains, Colorado, USA", "Sawatch Range, Colorado, USA", "Colorado, USA", "San Juan Mountains, Colorado, USA", "Sangre de Cristo Range, Colorado, USA", "Sangre de Cristo Range, Colorado, USA", "Sangre de Cristo Range, Colorado, USA", "Mosquito Range, Colorado, USA", "San Juan Mountains, Colorado, USA", "Andes, Columbia", "Sierra Nevada, California, USA", "Bernese Alps, Switzerland", "Elk Mountains, Colorado, USA", "Sierra Nevada, California, USA", "San Juan Mountains, Colorado, USA", "Sierra Nevada, California, USA", "San Juan Mountains, Colorado, USA", "San Juan Mountains, Colorado, USA", "Sierra Nevada, California, USA", "Sawatch Range, Colorado, USA", "Sawatch Range, Colorado, USA", "Sierra Nevada, California, USA", "San Juan Mountains, Colorado, USA", "Saint Elias Mountains, Yukon, Canada", "San Juan Mountains, Colorado, USA", "Saint Elias Mountains, Yukon, Canada", "Graian Alps, Mont Blanc massif, France", "Graian Alps, Mont Blanc massif, France", "Pennine Alps, Switzerland", "Saint Elias Mountains, Yukon, Canada", "Pennine Alps, Switzerland", "Guatemala", "Pennine Alps, Switzerland", "Needle Mountains, Colorado, USA", "Sierra Nevada, California, USA", "Alaska, USA", "Bolivia", "Mont Blanc massif, France/Italy", "Wind River Range, Wyoming, USA", "Hawaii, USA", "Pennine Alps, Switzerland", "Hawaii, USA (highest mountain base to summit)", "Mexico", "Zagros Mountains Iran", "Alborz, Iran", "Pennine Alps, Switzerland", "Teton Range, Wyoming, USA", "Saint Elias Mountains, Canada/USA", "Bernese Alps, Switzerland", "Pennine Alps, Switzerland", "Wind River Range, Wyoming, USA", "Wind River Range, Wyoming, USA", "Antarctica", "Pennine Alps, Switzerland", "Hawaii, USA", "Atlas Mountains, Morocco", "Antarctica", "Pennine Alps, Switzerland/Italy", "Bernese Alps, Switzerland", "Pennine Alps, Switzerland", "Wind River Range, Wyoming, USA", "Andes, Argentina", "Fairweather Range, Canada/USA", "Wind River Range, Wyoming, USA", "Wind River Range, Wyoming, USA", "Front Range, Rocky Mountains, Colorado, USA", "Cilo Daglari Hakkari, Turkey", "Wind River Range, Wyoming, USA", "White Mountains, California, USA", "Uinta Range, Utah, USA", "Mont Blanc massif, France", "Papua New Guinea", "Queen Alexandra Range, Antarctica", "Wind River Range, Wyoming, USA", "Wind River Range, Wyoming, USA", "Graian Alps, Mont Blanc massif, France", "Wind River Range, Wyoming", "Mont Blanc massif, Italy", "Bernese Alps, Switzerland", "Wind River Range, Wyoming, USA", "Dauphiné Alps, France", "Armenia", "Cameroon", "Sabah, Malaysia  Highest in Malaysia", "Front Range, Rocky Mountains, Colorado, USA", "Pennine Alps, Switzerland", "Hawaii, USA", "Prince Olav Mountains, Antarctica", "Papua New Guinea", "Prince Olav Mountains, Antarctica", "Graian Alps, Italy", "Pennine Alps, Switzerland", "Bernina Alps, Switzerland", "Bernese Alps, Switzerland", "Bernese Alps, Switzerland", "Bernese Alps, Switzerland", "Graian Alps, Mont Blanc massif, France", "Front Range, Rocky Mountains, Colorado, USA", "Pennine Alps, Switzerland", "Wind River Range, Wyoming, USA", "Caucasus Mountains, Svaneti, Georgia", "Pennine Alps, Switzerland", "British Columbia, Canada", "Chugach Range, Alaska, USA", "Dauphiné Alps, France", "San Juan Mountains, Colorado, USA", "Mont Blanc massif, France/Italy", "Sierra Nevada, California, USA", "Big Horn Mountains, Wyoming, USA", "Sangre de Cristo Mountains, New Mexico, USA", "Pennine Alps, Switzerland", "San Juan Mountains, Colorado, USA", "Absaroka Range, Wyoming, USA", "New Mexico, USA", "Mont Blanc massif, France"};
         
         string dreier[314]={"Piz Zupò", "Truchas Peak", "Fletschhorn", "Mount Albert Edward", "La Meije", "Wheeler Peak", "Mount Dana", "Acatenango", "Piz Roseg", "Piz Scerscen", "Eiger", "Mount Tochal", "Black Tooth Mountain", "Grand Cornier", "Mount Owen", "Ailefroide", "Mount Robson", "Descabezado Grande", "Yu Shan (Mount Jade)", "Mont Pelvoux", "Mount Julian", "Mount Erciyes", "Bomber Mountain", "Pic Sans Nom", "Jicarita Peak", "Ortler", "Piz Palü", "Middle Teton", "Aiguille d'Argentière", "Granite Peak", "Mount Gibbs", "Mount Crillon", "Mont Blanc de Cheilon", "Aiguille du Goûter", "Borah Peak", "Grande Casse", "Humphreys Peak", "Santa Fe Baldy", "Mount Baldwin", "Aiguille du Midi", "Mount Moran", "Monte Viso", "Nesthorn", "Cerro Chirripó", "Aiguille des Glaciers", "South Teton", "La Râteau", "Mount Kerinci", "Großglockner", "Pigne d'Arolla", "Mount Erebus", "Mont Pourri", "Mount Fuji", "Wildspitze", "Greenhorn Mountain", "Volcán de Fuego", "Teewinot Mountain", "Aiguille du Dru", "Aoraki/Mount Cook", "Pointe de Charbonnel", "Piz Morteratsch", "Mount Davis", "Mount Morrison", "Aiguille de la Grande Sassière", "Lanín", "Mount Columbia", "Mount Adams", "Teepe Pillar", "Weißkugel", "Minarets", "Mount Huntington", "Mount Rinjani", "Cerro del Potosí", "Teide", "Asperity Mountain", "Sahand", "Monte San Lorenzo", "Wetterhorn", "Dent Parrachée", "Gunnbjørn", "North Twin Peak", "Monte Disgrazia", "Semeru", "Les Bans", "Cloudveil Dome", "Thor Peak", "Medicine Bow Peak", "Hyndman Peak", "Mount Clemenceau", "Mount Frakes", "Grande Motte", "Sierra Blanca", "Pointe de la Fournache", "Buck Mountain", "Mount Nebo", "Mount Charleston", "Hintere Schwärze", "Nez Perce Peak", "Mount Alberta", "Mount Assiniboine", "Tödi", "Mount Forbes", "Lautaro", "Dôme de la Sache", "Castle Peak", "Dôme de l'Arpont", "Dôme de Chasseforêt", "Makra Peak", "Sierra Velluda", "Grand Roc Noir", "Mount Timpanogos", "Dôme des Nants", "Ryan Peak", "South Twin Peak", "Olan", "Aiguille de Péclet", "Presanella", "Mount Steere", "Monarch Mountain", "Monte Leone", "Mont Turia", "Mount Temple", "Disappointment Peak", "Mount Woodring", "Aiguille de Polset", "Snow Dome", "Aiguilles d'Arves", "Mont de Gébroulaz", "Mount San Gorgonio", "Mount Kitchener", "Zuckerhütl", "Mount Wister", "Mount Saskatchewan", "Mount Tasman", "Dôme de Chasseforêt", "Mount Hungabee", "Mount Athabasca", "Tronador", "Mount Saint John", "Thabana Ntlenyana", "Pointes du Châtelard", "Mulhacén", "Mount Berlin", "Volcán Barú", "Roc des Saints Pères", "Mount Brazeau", "Mount Nyiragongo", "Ruby Dome", "Roche de la Muzelle", "Mount Victoria", "Abajo Peak", "Eagle Peak", "Doane Peak", "Ranger Peak", "Cerro de la Muerte", "Furgghorn", "Mount Andromeda", "Mount Joffre", "Hilgard Peak", "Static Peak", "Pointe de la Sana", "Eagles Rest Peak", "Irazú Volcano", "Mount Hood", "Deltaform Mountain", "Mount Lefroy", "Pointe de l'Échelle", "Pointe du Bouchet", "Mount Fitzgerald", "Bellecôte", "Crazy Peak", "Emi Koussi", "Piz Linard", "Mount Woolley", "Aneto", "Fluchthorn", "Grand Bec", "Rockchuck Peak", "Mount Hector", "Piz Platta", "Telescope Peak", "Champagne Castle", "Pic Uzu", "Cerro Chaltén", "Mount Spurr", "Pointe du Vallonnet", "Mammoth Mountain", "Fründenhorn", "Pointe Renod", "Traverse Peak", "Mount Edith Cavell", "Dôme des Sonnailles", "Mount Agepsta", "Mount Munday", "Pointe de Claret", "Monte Perdido", "Electric Peak", "Mount Saskatchewan", "Cerro Fábrega", "Ward Mountain", "Pointe de Méan Martin", "Dôme de Polset", "Cathedral Peak", "Raynolds Peak", "Rolling Thunder Mountain", "Mount Hampton", "Dôme des Pichères", "Grand Roc", "Giant's Castle", "Sunwapta Peak", "Piz Buin", "Mount Ball", "Piz Badile", "Mount Chephren", "Ag Dag", "Mount Silberhorn", "San Jacinto Peak", "Didi Abuli", "Bivouac Peak", "Mount Wilbur", "Monte Argentera", "Mount Samsari", "Roche Chevrière", "Habicht", "Thompson Peak", "Pointe de Thorens", "Mount Cramer", "Toussidé", "Antelao", "Mont Pelve", "Mount Stanley Baldwin", "Sandia Crest", "Épaule du Bouchet", "Mount Smythe", "Wildstrubel", "Williams Peak", "Titlis", "Owl Peak", "Mount Mackenzie King", "Pointe des Buffettes", "Lisenser Spitze", "Mount Terror", "Aiguille Rouge", "Monte Civetta", "Symmetry Spire", "Glacier Peak", "Pointe du Dard", "Mount Binalud", "Pointe de la Réchasse", "Mount Jefferson", "Mount Jefferson", "Dreiländerspitze", "Mount Kita", "Mount Hotaka", "Mount Cleveland", "Ainodake", "Lassen Peak", "Mount Galatea", "Rendezvous Mountain", "Mount Jackson", "Saviers Peak", "Mount Yari", "Parícutin", "Mount Aylmer", "South Sister", "Stanley Peak", "Jøkulkyrkja", "Pica d'Estats", "Mount Arakawa", "Gray Peak", "Mount Heyburn", "Mount Washburn", "Mount Collie", "Mount Siple", "Pirchinassi", "Mount Redoubt", "Mount Babel", "Mount Emei", "Pico Duarte", "Trapper Peak", "Storm Mountain", "Mount Blackmore", "Mount Stimson", "Mol Len", "Qurnat as Sawda", "Mount Richardson", "Kintla Peak", "Mount Moulton", "Smoky Dome", "North Sister", "Piton des Neiges", "Mount San Antonio", "Mount Ontake", "Mount Jackson", "Middle Sister", "Mount Nyamuragira", "Crowfoot Mountain", "Haleakala", "Mount Chester", "Mount Siyeh", "Mount Merritt", "Cerro de Coxóm", "Parseierspitze", "Mount Senjo", "Mount Aspiring/Tititea", "Kinnerly Peak", "Mount Agung", "Mount McArthur", "Mount Norikura", "Tsiteli Khati", "Mount Tate", "Mount Tahat", "Sapitwa", "The Fortress"};
         int heightDreier[314]={3995, 3994, 3993, 3990, 3987, 3982, 3981, 3976, 3973, 3971, 3970, 3964, 3964, 3962, 3957, 3954, 3954, 3953, 3952, 3946, 3940, 3916, 3914, 3919, 3912, 3905, 3905, 3903, 3902, 3901, 3893, 3879, 3870, 3863, 3861, 3855, 3852, 3847, 3845, 3842, 3842, 3841, 3822, 3820, 3816, 3814, 3809, 3800, 3798, 3796, 3794, 3779, 3776, 3774, 3763, 3763, 3757, 3754, 3754, 3752, 3751, 3750, 3750, 3747, 3747, 3747, 3743, 3739, 3739, 3735, 3731, 3726, 3721, 3718, 3716, 3707, 3706, 3701, 3697, 3694, 3684, 3678, 3676, 3669, 3666, 3666, 3661, 3660, 3658, 3654, 3853, 3652, 3639, 3639, 3636, 3632, 3628, 3627, 3619, 3618, 3614, 3612, 3607, 3601, 3601, 3599, 3586, 3586, 3585, 3582, 3582, 3570, 3570, 3566, 3564, 3561, 3558, 3558, 3555, 3552, 3550, 3543, 3541, 3533, 3531, 3520, 3515, 3511, 3505, 3505, 3505, 3502, 3500, 3497, 3479, 3492, 3491, 3491, 3484, 3482, 3479, 3479, 3478, 3475, 3470, 3470, 3470, 3470, 3465, 3464, 3463, 3462, 3461, 3461, 3451, 3451, 3450, 3449, 3449, 3445, 3436, 3431, 3431, 3429, 3424, 3423, 3422, 3420, 3418, 3417, 3417, 3415, 3410, 3405, 3404, 3399, 3398, 3397, 3394, 3392, 3392, 3377, 3376, 3375, 3374, 3372, 3371, 3369, 3368, 3368, 3363, 3361, 3357, 3356, 3355, 3355, 3343, 3342, 3335, 3333, 3330, 3326, 3326, 3325, 3324, 3323, 3319, 3316, 3315, 3315, 3312, 3311, 3308, 3307, 3306, 3303, 3302, 3301, 3299, 3298, 3297, 3285, 3281, 3277, 3277, 3266, 3266, 3265, 3264, 3261, 3256, 3255, 3250, 3246, 3243, 3242, 3238, 3235, 3234, 3233, 3230, 3230, 3227, 3220, 3219, 3213, 3212, 3211, 3206, 3204, 3199, 3197, 3193, 3190, 3190, 3189, 3189, 3185, 3185, 3184, 3182, 3180, 3170, 3162, 3157, 3155, 3148, 3143, 3141, 3140, 3139, 3122, 3116, 3110, 3110, 3108, 3101, 3099, 3098, 3096, 3095, 3094, 3091, 3088, 3088, 3086, 3079, 3078, 3077, 3074, 3069, 3068, 3067, 3064, 3062, 3058, 3055, 3055, 3054, 3052, 3049, 3045, 3036, 3033, 3033, 3031, 3031, 3021, 3026, 3026, 3015, 3003, 3002, 3000};
         string locationDreier[314]={"Bernina Range, Switzerland", "Sangre de Cristo Mountains, New Mexico", "Pennine Alps, Switzerland", "Papua New Guinea", "Dauphiné Alps, France", "Snake Range, Nevada", "California", "Guatemala", "Bernina Range, Switzerland", "Bernina Range, Switzerland", "Bernese Oberland, Switzerland", "Alborz, Iran", "Bighorn Mountains, Wyoming", "Pennine Alps, Switzerland", "Teton Range, Wyoming", "Dauphiné Alps, France", "Highest point in the Canadian Rockies", "Chile", "Highest point in Taiwan", "Dauphiné Alps, France", "Colorado, USA", "Central Anatolia, Turkey", "Bighorn Range, Wyoming, USA", "Dauphiné Alps, France", "Sangre de Cristo Mountains, New Mexico", "Italy South Tyrol", "Bernina Range, Switzerland", "Teton Range, Wyoming", "Mont Blanc massif, France/Switzerland", "Montana, USA  Highest point", "Sierra Nevada, California, USA", "Fairweather Range, Alaska, USA", "Pennine Alps, Switzerland", "Graian Alps, Mont Blanc massif, France", "Idaho, USA  Highest point", "Vanoise Massif, France", "Arizona, USA  Highest point", "Sangre de Cristo Mountains, New Mexico", "Sierra Nevada, California, USA", "Graian Alps, Mont Blanc Massif, France", "Wyoming, USA", "Italian Alps", "Bernese Alps, Switzerland", "Highest in Costa Rica", "Mont Blanc massif, France/Italy", "Teton Range, Wyoming", "Dauphiné Alps, France", "Highest volcano in Indonesia", "Austria  Highest point", "Pennine Alps, Switzerland", "Antarctica  Southernmost active volcano", "Vanoise Massif, France", "Japan  Highest in Japan", "Austria", "Wet Mountains, Colorado, USA", "Guatemala", "Teton Range, Wyoming, USA", "Graian Alps, France", "New Zealand  Highest point", "Vanoise Massif, France", "Bernina Range, Switzerland", "California, USA", "California, USA", "Graian Alps, France", "Chile/Argentina", "Canadian Rockies  Highest in Alberta", "Washington, USA", "Teton Range, Wyoming, USA", "Alps, Austria/Italy", "Sierra Nevada, California", "Alaska Range, Alaska, USA", "Indonesia", "Mexico", "Canary Islands", "Waddington Range", "East Azerbaijan, Iran", "Patagonia, Argentina-Chile", "Bernese Alps, Switzerland", "Vanoise massif, France", "highest in Greenland", "Canadian Rockies", "Bregaglia, Switzerland", "Java, Indonesia", "Ecrins, France", "Teton Range, Wyoming, USA", "Teton Range, Wyoming, USA", "Wyoming, USA", "Idaho, USA", "Canadian Rockies", "Crary Mountains, Antarctica", "Vanoise Massif, France", "Sacramento Mountains, New Mexico", "Vanoise massif, France", "Teton Range, Wyoming", "Utah, USA", "Nevada, USA", "Ötztal Alps, Austria/Italy", "Teton Range, Wyoming, USA", "Canadian Rockies", "Canadian Rockies", "Swiss Alps", "Canadian Rockies", "Patagonia, Chile", "Vanoise massif, France", "Idaho, USA", "Vanoise massif, France", "Vanoise massif, France", "Pakistan", "Chile", "Vanoise massif, France", "Utah, USA", "Vanoise massif, France", "Idaho, USA", "Canadian Rockies", "Ecrins, France", "Vanoise massif, France", "Adamello-Presanella, Italy", "Antarctica", "Pacific Ranges, British Columbia, Canada", "Lepontine Alps, Switzerland", "Vanoise massif, France", "Canadian Rockies", "Teton Range, Wyoming", "Teton Range, Wyoming", "Vanoise Massif, France", "Canadian Rockies", "Arve Massif, France", "Vanoise massif, France", "California, USA", "Canadian Rockies", "Stubai Alps, Austria", "Teton Range, Wyoming", "Yukon, Canada", "Southern Alps, New Zealand", "Vanoise massif, France", "Canadian Rockies", "Canadian Rockies", "Chile/Argentina", "Teton Range, Wyoming", "Drakensberg, Africa", "Vanoise massif, France", "Spain", "Flood Range, Antarctica", "Chiriquí, Panama", "Vanoise massif, France", "Canadian Rockies", "Virunga Mountains, DRC", "Ruby Mountains, Nevada", "Dauphine Alps, France", "Canadian Rockies", "Abajo Mountains, Utah", "Absaroka Range, Wyoming, USA", "Teton Range, Wyoming, USA", "Teton range, Wyoming, USA", "Second highest in Costa Rica", "Pennine Alps, Switzerland", "Canadian Rockies", "Canadian Rockies", "Madison Range, Montana, USA", "Teton Range, Wyoming, USA", "Vanoise massif, France", "Teton Range, Wyoming, USA", "Costa Rica", "Cascade Range, Oregon, USA", "Canadian Rockies", "Canadian Rockies", "Vanoise massif, France", "Vanoise massif, France", "Ruby Mountains, Nevada, USA", "Vanoise massif, France", "Montana, USA", "Tibesti Mountains, Chad", "Switzerland", "Canadian Rockies", "Pyrenees, Spain", "Silvretta, Austria-Switzerland", "Vanoise massif, France", "Teton Range, Wyoming", "Canadian Rockies", "Swiss Alps", "Death Valley", "Drakensberg, South Africa", "Tibesti, Libya-Chad", "Patagonia, Argentina-Chile", "Alaska", "Vanoise massif, France", "California", "Bernese Alps, Switzerland", "Vanoise massif, France", "Teton Range, Wyoming", "Canadian Rockies", "Vanoise massif, France", "Gagra Range, Abkhazia, Georgia", "Pacific Ranges, B.C., Canada", "Vanoise massif, France", "Pyrenees", "Gallatin Range, Montana", "Canadian Rockies", "Bocas Del Toro, Panama", "Nevada, USA", "Vanoise massif, France", "Vanoise massif, France", "California, USA", "Teton Range, Wyoming", "Teton Range, Wyoming", "Antarctica", "Vanoise massif, France", "Vanoise massif, France", "Drakensberg, South Africa", "Canadian Rockies", "Silvretta, Austria-Switzerland", "Canadian Rockies", "Bregaglia, Switzerland", "Canadian Rockies", "Bozgush mountain range, East Azerbaijan, Iran", "Southern Alps, New Zealand", "California, USA", "Georgia", "Teton Range, Wyoming", "Fairweather Range, Alaska, USA", "Maritime Alps, Italy", "Abul-Samsari Range, Georgia", "Vanoise massif, France", "Stubai Alps, Austria", "Idaho, USA", "Vanoise massif, France", "Idaho, USA", "Tibesti Mountains, Chad-Libya", "Dolomites, Italy", "Vanoise massif, France", "Columbia Mountains, B.C., Canada", "New Mexico, USA", "Vanoise massif, France", "Canadian Rockies", "Bernese Alps, Switzerland", "Idaho, USA", "Bernese Alps, Switzerland", "Teton Range, Wyoming", "Cariboo Mountains, B.C., Canada", "Vanoise massif, France", "Stubai Alps, Austria", "Antarctica", "Vanoise massif, France", "Dolomites, Italy", "Teton Range, Wyoming", "Washington, USA", "Vanoise massif, France", "Alborz, Iran", "Vanoise massif, France", "Montana, USA", "Cascade Range, Oregon, USA", "Silvretta, Austria-Switzerland", "Akaishi Mountains, Japan", "Hida Mountains, Japan", "Montana, USA", "Akaishi Mountains, Japan", "California, USA", "Kananaskis Range, Alberta, Canada", "Teton Range, Wyoming, USA", "Highest British mountain, British Antarctic Territory", "Idaho, USA", "Hida Mountains, Japan", "Mexico", "Canadian Rockies", "Cascade Range, Oregon, USA", "Ball Range, Canadian Rockies", "Antarctica", "SpanishFrench border, Pyrenees", "Akaishi Mountains, Japan", "Yellowstone National Park, Wyoming, USA", "Idaho, USA", "Yellowstone National Park, Wyoming, USA", "Canadian Rockies", "Antarctica", "Muzaffarabad Azad Kashmir", "Alaska, USA", "Bow Range, Alberta, Canada", "China", "Dominican Republic", "Montana, USA", "Canadian Rockies", "Montana, USA", "Montana, USA", "Bhurma/India", "Lebanon", "Canadian Rockies", "Livingston Range, Montana, USA", "Antarctica", "Idaho, USA", "Cascade Range, Oregon, USA", "Réunion, France", "San Gabriel Mountains, California, USA", "Japan", "Lewis Range, Montana, USA", "Cascade Range, Oregon, USA", "Democratic Republic of the Congo", "Canadian Rockies", "Hawaii, USA", "Canadian Rockies", "Montana, USA", "Montana, USA", "Guatemala", "Austria", "Akaishi Mountains, Japan", "New Zealand", "Montana, USA", "Bali, Indonesia", "Canadian Rockies", "Hida Mountains, Japan", "Kharuli Range, Georgia", "Hida Mountains, Japan", "Algeria  Highest", "Mulanje Massif, Malawi", "Canadian Rockies"};
         
         string zweier[209]={"Sacajawea Peak", "Cascade Mountain", "Copahue", "Mount Girouard", "Pico da Neblina", "Mount Whyte", "Miranjani", "Forellen Peak", "Mount Andrus", "Mount Niblock", "Keele Peak", "Mount Odin", "Schilthorn", "Mount Tallac", "Mount Inglismaldie", "Mount Ramelau", "Zugspitze", "Little Alberta", "Iron Mountain", "Apo", "Fossil Mountain", "Coma Pedrosa", "Going to the Sun Mountain", "Pilot Mountain", "Urirotstock", "Musala", "Mount Pulag", "Mount Olympus", "Mount Gould", "Mount Blakiston", "Mount Sas dla Crusc", "Chutine Peak", "Rising Wolf Mountain", "Bonanza Peak", "Pic de Sanfonts", "Collarada", "Boardman Peak", "Lembert Dome", "Mount Stuart", "Mount Silverthrone", "Triglav", "Mount Saint Nicholas", "Mount Wilbur", "Mount Fernow", "Mount Hermon", "Mount Cory", "Mount Thielsen", "Copper Mountain", "Hayes Volcano", "Mount Edziza", "Canigou", "Mount Longonot", "Buckner Mountain", "Mount Longonot", "Seven Fingered Jack", "Mount Nirvana", "Chief Mountain", "Lincoln Peak", "Castle Mountain", "Pyramid Mountain", "Mount Korab", "Mount Sir James MacBrien", "Mount Olympus", "Mawson Peak", "Mount Baekdu", "Fairview Mountain", "krlatica", "Heavens Peak", "Mount Spickard", "Mount Melbourne", "Cerro El Pital", "Mount Redoubt", "Mount Morning", "Serles", "Watzmann", "Boston Peak", "Grotto Mountain", "Mount Haku", "Eldorado Peak", "Anaimudi", "Maja Jezerce", "Half Dome", "Mount Louis", "Mount Discovery", "Pic de la Selle", "Mount Garibaldi", "Guadalupe Peak", "Großer Krottenkopf", "Pic del Port Vell", "Gerlachov Peak", "Mount Michelson", "Mount St. Piran", "Mount Meager", "Mount Trus Madi", "Doddabetta", "Piton de la Fournaise", "Mount Crean", "Cardinal Peak", "Barbeau Peak", "Pelister Peak", "Pico Almanzor", "Mount Tavkvetili", "Argonaut Peak", "Doi Inthanon", "Cooke's Peak/Cook's Peak", "Pic dels Aspres", "Aguja Saint Exupery", "Mount St. Helens", "Big Hatchet Peak", "Moldoveanu Peak", "Negoiu Peak", "Vistea Mare", "Pidurutalagala", "Mount Norquay", "Hualalai", "Parangu Mare", "Mount Taranaki/Egmont", "Garfield Peak", "Mount Veniaminof", "Omu Peak", "Rysy", "Mount Tymfi", "pik", "Luna Peak", "Galdhøpiggen", "Glittertind", "El Capitan", "Shimbiris", "Sulphur Mountain", "Sunset Crater", "Faraya Mzaar", "Triple Divide Peak", "Monte Binga", "Mount Olympus", "Peñalara", "Mount Daniel", "Mount Murud", "Mocho", "Choshuenco", "Ha Ling Peak", "Store Skagastølstind", "Le Tabor", "Kirigalpottha", "Mount Cayley", "Mount Galwey", "Botev Peak", "Mount Mulu", "Mount Deception", "Mount Karthala", "Totapala Kanda", "Signal Mountain", "Mount Pico", "Mount Blum", "Mount Prophet", "Mount Griggs", "Lalla Khedidja", "Lavender Peak", "Pietrosul Rodnei Peak", "Mount Sir Allan MacNab", "Murree", "Druesberg", "Ineu Peak", "Bikku Bitti", "Sri Pada Mountain", "Mount John Laurie", "Red Butte", "Cvrsnica", "Mount Kosciuszko", "Mount Chiginagak", "Mount Townsend", "Harney Peak", "Golden Hinde", "Mount Twynam", "Elkhorn Mountain", "Mount Baldy", "Shiprock", "Mount Tahan", "Mount Korbu", "Doi Chiang Dao", "Galunggung", "Carruthers Peak", "Crna Glava", "Mount Colonel Foster", "Roche à Perdrix", "Kodaikanal", "Mount Pilatus", "Strmenica", "Phu Soi Dao", "Eagle Peak", "Zekova Glava", "Öræfajökull", "Mogotón", "Kebnekaise", "Rambler Peak", "Mount McBride", "Phou Khe", "Schneeberg", "Mount Tate", "Kings Peak", "Hoverla", "Mount Katmai", "Mount Celeste", "Mount Mitchell", "Namunukula", "Mount Batu Brinchang", "Doi Mae Tho", "Clingmans Dome", "Polar Bear Peak", "Mount Asgard"};
         int heightZweier[209]={2999, 2998, 2997, 2985, 2994, 2983, 2980, 2979, 2978, 2976, 2972, 2970, 2970, 2968, 2964, 2963, 2962, 2956, 2955, 2954, 2946, 2942, 2939, 2935, 2928, 2925, 2922, 2917, 2912, 2910, 2907, 2903, 2900, 2899, 2894, 2886, 2882, 2880, 2869, 2865, 2864, 2858, 2841, 2819, 2814, 2802, 2799, 2795, 2788, 2787, 2784, 2780, 2778, 2776, 2774, 2773, 2768, 2768, 2766, 2766, 2764, 2759, 2751, 2745, 2744, 2744, 2740, 2739, 2737, 2732, 2730, 2730, 2723, 2718, 2713, 2711, 2706, 2702, 2701, 2695, 2694, 2693, 2682, 2681, 2680, 2678, 2667, 2656, 2655, 2655, 2652, 2649, 2645, 2642, 2637, 2631, 2630, 2618, 2616, 2601, 2592, 2583, 2576, 2565, 2563, 2562, 2558, 2550, 2547, 2544, 2535, 2527, 2524, 2522, 2521, 2519, 2518, 2512, 2507, 2505, 2503, 2497, 2472, 2470, 2469, 2464, 2464, 2464, 2451, 2451, 2444, 2444, 2436, 2432, 2430, 2426, 2423, 2422, 2415, 2408, 2405, 2389, 2388, 2385, 2377, 2376, 2376, 2374, 2361, 2357, 2353, 2351, 2340, 2330, 2317, 2308, 2306, 2303, 2297, 2291, 2282, 2279, 2267, 2243, 2240, 2232, 2228, 2228, 2221, 2209, 2207, 2198, 2196, 2195, 2192, 2188, 2187, 2183, 2175, 2168, 2145, 2139, 2135, 2135, 2133, 2132, 2122, 2120, 2119, 2117, 2110, 2107, 2106, 2092, 2083, 2079, 2076, 2068, 2065, 2061, 2047, 2041, 2037, 2035, 2032, 2031, 2025, 2016, 2015};
         string locationZweier[209]={"Wallowa Mountains, Oregon, USA", "Vermillion Range, Canadian Rockies", "Andes, Argentina/Chile", "Fairholme Range, Canadian Rockies", "Brazil  Highest", "Bow Range, Canadian Rockies", "Pakistan", "Teton Range, Wyoming, USA", "Ames Range, Antarctica", "Bow Range, Canadian Rockies", "Mackenzie Mountains, Yukon, Canada", "Monashee Mountains, B.C. Canada", "Bernese Alps, Switzerland", "Sierra Nevada, California, USA", "Fairholme Range, Canadian Rockies", "Highest in East Timor", "Germany  Highest", "Sir Winston Churchill Range, Canadian Rockies", "Soldier Mountains, Idaho, USA", "Philippines  Highest", "Banff NP, Canada", "Pyrenees, Andorra  Highest", "Lewis Range, Montana, USA", "Massive Range, Canadian Rockies", "Switzerland", "Bulgaria  Highest", "Philippines", "Thessaly/Macedonia, Greece  Highest", "Montana, USA", "Flathead Range, Canadian Rockies", "Dolomites, Italy", "Coast Range, British Columbia", "Lewis Range, Montana, USA", "Cascade Range, Washington, USA", "Pyrenees, Andorra", "Pyrenees, Spain", "Soldier Mountains, Idaho, USA", "California, USA", "Cascades, Washington, USA", "British Columbia, Canada", "Slovenia  Highest", "Montana, USA", "Montana, USA", "Washington, USA", "Syria, Lebanon - a subpeak on its southern slopes is the high point of Golan Heights", "Alberta, Canada", "Cascades, USA", "Alberta, Canada", "Alaska, USA", "British Columbia, Canada", "Pyrenees, France", "RIftvalley, Kenya", "Washington, USA", "Great Rift Valley, Kenya", "Washington, USA", "Northwest Territories, Canada", "Montana, USA", "Washington, USA", "Canadian Rockies", "Canadian Rockies", "Republic of Macedonia & Albania  Highest", "Canada", "Utah, USA", "Highest in Australia", "North Korea/China Highest in North Korea", "Bow Range, Canadian Rockies", "Julian Alps, Slovenia", "Montana, USA", "North Cascades", "Antarctica", "El Salvador  Highest", "Washington, USA", "Antarctica", "Stubai Alps, Austria", "Bavarian Alps, Germany", "Washington, USA", "Canadian Rockies", "Ryohaku Mountains, Japan", "Washington, USA", "Kerala, India  #1 in Western Ghats, India", "#1 in Dinaric Alps, Albania", "Sierra Nevada, California, USA", "Alberta, Canada", "Antarctica", "Haiti", "British Columbia, Canada", "Guadalupe Mountains, Texas  Highest in Texas", "Allgäu Alps, Tyrol, Austria", "Pyrenees, Andorra", "High Tatras, Slovakia", "Chugach Mountains, Alaska, USA", "Bow Range, Alberta, Canada", "British Columbia, Canada", "Trus Madi Range, Sabah, Malaysia  #2 in Malaysia", "Tamil Nadu, India", "Réunion", "Victoria Land", "Washington, USA", "Nunavut, Canada  Highest in Nunavut", "Republic of Macedonia", "Spain", "Georgia", "Washington, USA", "Thailand  Highest in Thailand", "New Mexico,USA", "Pyrenees, Andorra", "Argentina", "Washington, USA", "New Mexico, USA", "Romania", "Romania", "Romania", "Sri Lanka", "Canadian Rockies", "Hawaii, USA", "Romania", "New Zealand", "Wyoming, USA", "Alaska, USA", "Romania", "Poland/Slovakia", "Pindus, Greece", "Julian Alps, Slovenia", "British Columbia, Canada", "Norway  Highest", "Norway", "Texas, USA", "Somalia", "Canadian Rockies", "Arizona, USA", "Keserwan, Lebanon", "Montana, USA", "Manica, Mozambique", "Washington, USA", "Spain", "Washington, USA", "Kelabit Highlands, Sarawak, Malaysia  Highest mountain in Sarawak", "Los Ríos Region, Chile", "Los Ríos Region, Chile", "Canadian Rockies, Alberta", "Norway", "Dauphine Alps, France", "Sri Lanka", "British Columbia, Canada", "Canadian Rockies", "Bulgaria", "Gunung Mulu National Park, Sarawak, Malaysia", "Washington, USA", "Comoros, Indian Ocean", "Sri Lanka", "Wyoming, USA", "Azores, Portugal", "North Cascades", "North Cascades", "Alaska, USA", "Djurdjura Mountains, Algeria", "British Columbia, Canada", "Rodnei Mountains, Romanian Carpathian Mountains, Romania", "Premier Range, British Columbia, Canada", "Rawalpindi, Pakistan", "Alps, Switzerland", "Rodnei Mountains, Romanian Carpathian Mountains, Romania", "Libya  Second Highest in country", "Sri Lanka", "Canadian Rockies, Alberta", "Arizona, USA", "Herzegovina, BiH", "Snowy Mountains, New South Wales, Australia  Highest on mainland", "Alaska, USA", "Snowy Mountains, New South Wales, Australia  Second-highest on mainland", "South Dakota, USA  Highest in state", "#1 on Vancouver Island, British Columbia, Canada", "Snowy Mountains, New South Wales, Australia  Third-highest on mainland", "Vancouver Island, British Columbia, Canada", "Alberta, Canada", "New Mexico, USA", "Tahan Range, Pahang, Malaysia  Highest in Peninsular Malaysia", "Titiwangsa Mountains, Perak, Malaysia", "Thailand", "Java", "Snowy Mountains, New South Wales, Australia", "Bjelasica, Crna Gora", "Vancouver Island, British Columbia, Canada", "Fiddle Range, Canadian Rockies", "Tamilnadu, India", "Switzerland", "Bjelasica, Crna Gora", "Thailand/Laos", "Alaska, USA", "Bjelasica, Crna Gora", "Iceland", "Nicaragua  Highest in Nicaragua", "Sweden", "Vancouver Island, British Columbia, Canada", "Vancouver Island, British Columbia, Canada", "Thailand/Laos", "Northern Limestone Alps, Austria", "Snowy Mountains, New South Wales, Australia", "Vancouver Island, British Columbia, Canada", "Ukraine  Highest", "Alaska, USA", "Vancouver Island, British Columbia, Canada", "Yancey County, North Carolina, USA", "Sri Lanka", "Cameron Highlands, Pahang/Perak, Malaysia", "Thailand", "Great Smoky Mountains, Tennessee, USA", "Chugach Mountains, Alaska, USA", "Baffin Mountains, Nunavut, Canada"};
         
         string einser[132]={"Serra da Estrela", "Mount Bogong", "Mount Ishizuchi", "Doi Phu Kha", "Mount Tongariro", "Iceberg Peak", "Pico Turquino", "El Piveto Mountain", "Qiajivik Mountain", "Farcau Peak", "Ciucas Peak", "Mount Olympus", "Hallasan", "Jabal Bil Ays", "Mullayanagiri", "Mount Kirigamine", "Mount Washington", "Mount Jiri", "Mont Ventoux", "Ocolasu Mare", "Mount Toaca", "Vesper Peak", "Baba Budangiri", "Kudremukh", "Orjen", "Mount George V", "Rugged Mountain", "Straja", "Trident Volcano", "Mount Martin", "Knuckles", "Budacu", "Giumalau", "Cucurbata Mare", "Crown Mountain", "Tibles", "Loser", "Vladeasa", "Cerro La Campana", "Muntele Mare", "Cerro de la Silla", "Biligiriranga Hills", "Rigi", "Ha?ma?u Mare", "Pietrosu Peak", "Goru", "Lacaut", "Saca Peak", "Penteleu", "Mount Api", "Tadiandamol", "Mount Rogers", "Doi Phi Pan Nam", "Mount Wilson", "Daisen", "The Horn (Mount Buffalo)", "Mount Batur", "Kumara Parvata", "Pushpagiri", "Mount Lowe", "Boulder Peak", "Doi Luang", "Mitre Peak", "Mount Caubvik", "Rarau", "Peak 5390", "Mount Marcy", "Brahmagiri", "Mount Katahdin", "Sneka", "Sirumalai", "Mount Washington (British Columbia)", "Mount Benarat", "Wai'ale'ale", "Mount Baw Baw", "Cirque Mountain", "Superstition Mountain", "Jabel Yibir", "Madikeri", "Mount Popa", "Askja", "Kamakau", "Javaleon", "Mount Nuang", "Hekla", "Mount Pinatubo", "Spruce Knob", "Agriolefkes", "Mount Seymour", "Himavad Gopalaswamy Betta", "Snæfellsjökull", "Gutai Peak", "Cypress Mountain", "Yelagiri", "Ben Nevis", "Kodachadri", "Mount Aniakchak", "Cerro de Punta", "Mount Bassie", "Ben Macdhui", "Mount Kanaga", "Sinhagad", "Rajabasa", "Mount Vesuvius", "Mount Ophir", "Mount Wellington", "Mount Si", "Detunata", "Mount Donna Buang", "Camel's Hump", "Cannon Mountain", "Grouse Mountain", "Ka?ala", "Mount Jerai", "Mount Meron", "Doi Lan", "Mount Diablo", "Bidean nam Bian", "Monte Musinè", "Brocken", "Victoria Peak", "Snowdon", "Flattop Mountain", "Uummannaq", "White Butte", "Liathach", "Corrán Tuathail", "Mount Ramon", "Buachaille Etive Mor", "Kékes", "Mount Belumut", "Old Rag Mountain"};
         int heightEinser[132]={1993, 1986, 1982, 1980, 1978, 1977, 1975, 1969, 1963, 1956, 1954, 1952, 1950, 1934, 1930, 1925, 1917, 1915, 1909, 1907, 1900, 1896, 1895, 1894, 1894, 1883, 1875, 1868, 1864, 1863, 1862, 1859, 1856, 1849, 1846, 1839, 1838, 1836, 1828, 1826, 1820, 1800, 1797, 1792, 1791, 1784, 1777, 1776, 1772, 1750, 1748, 1746, 1745, 1742, 1729, 1723, 1717, 1712, 1712, 1707, 1707, 1694, 1692, 1652, 1650, 1643, 1629, 1608, 1606, 1602, 1600, 1590, 1585, 1569, 1567, 1567, 1542, 1527, 1525, 1518, 1516, 1512, 1494, 1491, 1491, 1486, 1482, 1471, 1455, 1450, 1446, 1443, 1432, 1410, 1344, 1343, 1341, 1338, 1311, 1309, 1307, 1303, 1281, 1281, 1276, 1271, 1270, 1258, 1250, 1244, 1240, 1231, 1220, 1217, 1208, 1174, 1173, 1150, 1150, 1141, 1120, 1085, 1070, 1070, 1069, 1055, 1038, 1037, 1022, 1014, 1010, 1001};
         string locationEinser[132]={"Portugal", "Australia  Highest in Victoria", "Japan  Tallest in Western Japan", "Luang Prabang Range, Thailand", "New Zealand", "Vancouver Island, British Columbia, Canada", "Cuba  Highest point", "Vancouver Island, British Columbia, Canada", "Baffin Island, Nunavut, Canada", "Romania", "Romania", "Cyprus", "CheJudo, South Korea/ Highest Mountain in South Korea", "Oman", "Chikmagalur, Karnataka, India", "Japan", "Presidential Range, White Mtns., Appalachian Mountains, USA  Highest in American Northeast", "South Korea", "France", "Romania", "Romania", "Washington, USA", "Chikmagalur, Karnataka, India", "Chikmagalur, Karnataka, India", "Montenegro, Bosnia and Herzegovina", "Vancouver Island, British Columbia, Canada", "Vancouver Island, British Columbia, Canada", "Romania", "Alaska, USA", "Alaska, USA", "Sri Lanka", "Romania", "Romania", "Romania", "Vancouver Island, British Columbia, Canada", "Romania", "Austria", "Romania", "Olmue, Chile", "Romania", "Mexico", "Chamarajanagar, Karnataka, India", "Swiss Alps", "Romania", "Romania", "Romania", "Romania", "Romania", "Romania", "Gunung Mulu National Park, Sarawak, Malaysia", "Kodagu, Karnataka, India", "Virginia, USA  Highest point in state", "Luang Prabang Range, Thailand", "California, USA", "Japan", "Victoria, Australia", "Bali, Indonesia", "Dakshina Kannada, Karnataka, India", "Pushpagiri Wildlife Sanctuary, Karnataka, India", "San Gabriel Mountains, California, USA", "Olympic Mountains, Washington, USA", "Phi Pan Nam Range, Thailand", "New Zealand", "Torngat Mountains, Canada", "Romania", "Alaska, USA", "New York, USA", "Kodagu, Karnataka, India", "Maine, USA", "Krkonoe, Czech Republic  #1 in Czech republic", "Tamilnadu India", "Vancouver Island, British Columbia, Canada", "Gunung Mulu National Park, Sarawak, Malaysia", "Kauai, Hawaii, USA", "Australia", "Labrador, Canada", "Arizona, USA", "United Arab Emirates", "Kodagu, Karnataka, India", "Myanmar", "Iceland", "Molokai, Hawaii, USA", "Spain", "Titiwangsa Mountains, Malaysia", "Iceland", "Luzon, Philippines", "West Virginia, USA", "Pelion, Greece", "British Columbia, Canada", "Chamarajanagar, Karnataka, India", "Iceland", "Romania", "British Columbia, Canada", "Tamilnadu, India", "Scotland  Highest in the United Kingdom", "Shimoga, Karnataka, India", "Alaska, USA", "Jayuya, Puerto Rico  Highest in Puerto Rico", "Alaska, USA", "Scotland", "Alaska, USA", "Maharashtra, India", "Sumatra, Indonesia", "Italy", "Titiwangsa Mountains, Johor, Malaysia", "Tasmania/Australia", "Washington, USA", "Romania", "Victoria, Australia", "Vermont, USA", "New Hampshire, USA", "British Columbia, Canada", "Oahu, Hawaii, USA", "Titiwangsa Mountains, Kedah, Malaysia", "Galilee, Israel  Highest in Israel (inside the '67 borders)", "Phi Pan Nam Range, Thailand", "California, USA", "Scotland", "Piedmont, Italy", "Saxony-Anhalt, Germany  Highest mountain in the Harz; highest in Saxony-Anhalt", "Belize  2nd highest mountain in Belize", "Gwynedd, Wales  Highest", "Alaska, USA", "Greenland", "North Dakota, USA  Highest in state", "Torridon, Scotland", "County Kerry, Ireland  Highest mountain in Ireland", "Negev, Israel", "Glen Etive, Scotland", "Hungary  Highest mountain in Hungary", "Johor, Malaysia", "Virginia, USA"};
         
         string nuller[72]={"Magura Priei", "Sgurr Dearg", "Mount Sizer", "Mount Valin", "Hyangnosan", "Scafell Pike", "Mount Edgecumbe", "North Mountain (Catskills)", "Tai Mo Shan", "Helvellyn", "El Cerro del Aripo", "El Tucuche", "Lantau Peak", "Kaimondake volcano", "Pantokrator", "Mount Gerizim", "Sunset Peak", "Slaíbh Domhnaírt", "Muntele Cetatuia", "Hoemunsan", "Drocea", "Mount Carleton", "Mount Santubong", "Gros Morne", "Clisham", "Mount Tamalpais", "Gyemyeongsan", "Mount Boucherie", "Gaseopsan", "Puu Oo", "Signal de Botrange", "Ishpatina Ridge", "Galgisan", "Delphi", "Qalorujoorneq", "Maple Mountain", "Masaya", "High Willhays", "Munsusan (Ulsan)", "Mount Takao", "Sikjangsan", "Gwanggyosan", "Mount Pond", "Monte Conero", "Gyeryongsan (South Gyeongsang Province)", "Namamsan", "Great Mell Fell", "Geomdansan (Seongnam)", "Yeonhwasan", "Heukseongsan", "Little Si", "Tutuiatu Peak", "Pu'u Moaulanui", "Blue Mountain", "Muryongsan (Ulsan)", "Dongdaesan (Ulsan)", "Storm King Mountain", "Diamond Hill", "Gyeyangsan", "Loughrigg Fell", "Mount Kinka (Gifu)", "Vaalserberg", "Suur Munamägi", "Auktojas", "Kruopine", "Juozapine", "Hwajangsan", "Jerimoth Hill", "Diamond Head", "Yeomposan", "Hamwolsan", "Britton Hill"};
         int heightNuller[72]={996, 986, 980, 980, 979, 978, 976, 969, 957, 950, 940, 936, 934, 924, 906, 881, 869, 856, 850, 837, 836, 817, 810, 807, 799, 792, 774, 758, 710, 698, 694, 690, 685, 681, 676, 642, 635, 621, 600, 599, 596, 582, 576, 572, 566, 543, 537, 534, 532, 519, 480, 467, 452, 452, 452, 447, 408, 400, 395, 335, 329, 321, 318, 293, 293, 292, 285, 247, 232, 203, 200, 105};
         string rangeNuller[72]={"Romania", "Cuillin", "Diablo Range", "Saguenay Lac St-Jean", " ", "Southern Fells", " ", "Catskill Escarpment", " ", "Eastern Fells", "Northern Range", "Northern Range", " ", " ", " ", " ", " ", "Mourne mountains", "Romania", " ", "Romania", "Appalachian Mountains", " ", " ", " ", "California Coast Ranges", " ", " ", " ", " ", "High Fens", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "Eastern Fells", " ", " ", " ", "Cascade Range", "Romania", " ", " ", " ", " ", "Hudson Highlands", "Connemara National Park", " ", "Central Fells", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "};
         string locationNuller[72]={" ", "Scotland", "USA (California)", "Canada (Québec)", "Gyeongnam Province, South Korea", "England (Cumbria)  Highest in England", "USA (Alaska)", "USA (New York)", "Hong Kong  Highest in Hong Kong", "England (Cumbria)", "Trinidad and Tobago  Highest point", "Trinidad and Tobago", "Hong Kong", "Kagoshima, Japan", "Greece (Corfu)", "West Bank", "Hong Kong", "County Down,Northern Ireland", " ", "North Jeolla Province, South Korea", " ", "Canada (New Brunswick)", "Malaysia (Sarawak)", "Canada (Newfoundland)", "Harris,Western Isles,Scotland", "USA (California)", "North Chungcheong Province, South Korea", "Canada (British Columbia)", "North Chungcheong Province, South Korea", "USA (Hawaii)", "Belgium (Liège)  Highest in Belgium", "Canada (Ontario)", "Gyeonggi Province, and Gangwon Province, South Korea", "Greece (Skopelos)", "Greenland", "Canada (Ontario)", "Nicaragua", "England (Dartmoor)", "Ulsan, South Korea", "Tokyo, Japan", "Daejeon, South Korea", "Gyeonggi Province, South Korea", "South Shetland Islands", "Italy (Ancona)", "South Gyeongsang Province, South Korea", "Ulsan, South Korea", "England (Cumbria)", "Gyeonggi Province, South Korea", "Ulsan, South Korea", "North Chungcheong Province, South Korea", "Washington, USA", " ", "Kahoolawe, Hawaii", "Ontario, Canada", "Ulsan, South Korea", "Ulsan, South Korea", "USA (New York)", "Ireland", "Incheon, South Korea", "England (Cumbria)", "Gifu, Japan", "Netherlands (Limburg)", "Haanja, Estonia", "Medininkai, Lithuania", "Vilnius, Lithuania", "Vilnius, Lithuania", "Ulsan, South Korea", "Rhode Island, USA", "USA (Hawaii)", "Ulsan, South Korea", "Ulsan, South Korea", "Florida, USA  The lowest high point of any US state"};
         
         string defaultRange=" ";        
         //gameIntro(nuller[0], heightNuller[0], rangeNuller[0], locationNuller[0]);         
         int null1=rand() % 72;
         int eins1=rand() % 132;
         int eins2=rand() % 132;
         int zwei1=rand() % 209;
         int zwei2=rand() % 209;
         int zwei3=rand() % 209;
         int drei1=rand() % 314;
         int drei2=rand() % 314;
         int drei3=rand() % 314;
         /*int drei4=rand() % 314;
         int drei5=rand() % 314;*/
         int vier1=rand() % 250;
         int vier2=rand() % 250;
         /*int vier3=rand() % 250;
         int vier4=rand() % 250;*/
         int fuenf1=rand() % 58;
         /*int fuenf2=rand() % 58;
         int fuenf3=rand() % 58;
         int fuenf4=rand() % 58;*/
         int sechs1=rand() % 73;
         /*int sechs2=rand() % 73;
         int sechs3=rand() % 73;*/
         int sieben1=rand() % 102;
         //int sieben2=rand() % 102;
         int acht1=rand() % 14;
         //Everest
               
         cout << "\n 1.    " << nuller[null1];
         Sleep(300); 
         cout << "\n\n 2.    " << einser[eins1];
         Sleep(300);
         //cout << "\n 3.    " << einser[eins2];
         //Sleep(300);
         cout << "\n\n 3.    " << zweier[zwei1];
         Sleep(300);
         //cout << "\n 5.    " << zweier[zwei2];
         //Sleep(300);
         //cout << "\n 6.    " << zweier[zwei3];
         //Sleep(300);
         cout << "\n\n 4.    " << dreier[drei1];
         Sleep(300);
         //cout << "\n 8.    " << dreier[drei2];
         //Sleep(300);
         //cout << "\n 9.    " << dreier[drei3];
         //Sleep(300);
         /*cout << "\n 10.   " << dreier[drei4];
         Sleep(300);
         cout << "\n 11.   " << dreier[drei5];
         Sleep(300);*/
         cout << "\n\n 5.    " << vierer[vier1];
         Sleep(300);
         //cout << "\n 11.   " << vierer[vier2];
         //Sleep(300);
         /*cout << "\n 14.   " << vierer[vier3];
         Sleep(300);
         cout << "\n 15.   " << vierer[vier4];
         Sleep(300);*/
         cout << "\n\n 6.    " << fuenfer[fuenf1];
         Sleep(300);
         /*cout << "\n 17.   " << fuenfer[fuenf2];
         Sleep(300);
         cout << "\n 18.   " << fuenfer[fuenf3];
         Sleep(300);
         cout << "\n 19.   " << fuenfer[fuenf4];
         Sleep(300);*/
         cout << "\n\n 7.    " << sechser[sechs1];
         Sleep(300);
         /*cout << "\n 21.   " << sechser[sechs2];
         Sleep(300);
         cout << "\n 22.   " << sechser[sechs3];
         Sleep(300);*/
         cout << "\n\n 8.    " << siebener[sieben1];
         Sleep(300);
         /*cout << "\n 24.   " << siebener[sieben2];
         Sleep(300);*/
         cout << "\n\n 9.    " << achter[acht1];
         Sleep(300);
         cout << "\n\n 10.   " << "Mount Everest";
         Sleep(1500);

         int score=0;
         score=gameIntro(nuller[null1], heightNuller[null1], rangeNuller[null1], locationNuller[null1], score);
         score=gameIntro(einser[eins1], heightEinser[eins1], defaultRange, locationEinser[eins1], score);
         //score=gameIntro(einser[eins2], heightEinser[eins2], defaultRange, locationEinser[eins2], score);
         score=gameIntro(zweier[zwei1], heightZweier[zwei1], defaultRange, locationZweier[zwei1], score);
         //score=gameIntro(zweier[zwei2], heightZweier[zwei2], defaultRange, locationZweier[zwei2], score);
         //score=gameIntro(zweier[zwei3], heightZweier[zwei3], defaultRange, locationZweier[zwei3], score);
         score=gameIntro(dreier[drei1], heightDreier[drei1], defaultRange, locationDreier[drei1], score);
         //score=gameIntro(dreier[drei2], heightDreier[drei2], defaultRange, locationDreier[drei2], score);
         //score=gameIntro(dreier[drei3], heightDreier[drei3], defaultRange, locationDreier[drei3], score);
         //score=gameIntro(dreier[drei4], heightDreier[drei4], defaultRange, locationDreier[drei4], score);
         //score=gameIntro(dreier[drei5], heightDreier[drei5], defaultRange, locationDreier[drei5], score);
         score=gameIntro(vierer[vier1], heightVierer[vier1], defaultRange, locationVierer[vier1], score);
         //score=gameIntro(vierer[vier2], heightVierer[vier2], defaultRange, locationVierer[vier2], score);
         //score=gameIntro(vierer[vier3], heightVierer[vier3], defaultRange, locationVierer[vier3], score);
         //score=gameIntro(vierer[vier4], heightVierer[vier4], defaultRange, locationVierer[vier4], score);
         score=gameIntro(fuenfer[fuenf1], heightFuenfer[fuenf1], rangeFuenfer[fuenf1], locationFuenfer[fuenf1], score);
         //score=gameIntro(fuenfer[fuenf2], heightFuenfer[fuenf2], rangeFuenfer[fuenf2], locationFuenfer[fuenf2], score);
         //score=gameIntro(fuenfer[fuenf3], heightFuenfer[fuenf3], rangeFuenfer[fuenf3], locationFuenfer[fuenf3], score);
         //score=gameIntro(fuenfer[fuenf4], heightFuenfer[fuenf4], rangeFuenfer[fuenf4], locationFuenfer[fuenf4], score);
         score=gameIntro(sechser[sechs1], heightSechser[sechs1], defaultRange, locationSechser[sechs1], score);
         //score=gameIntro(sechser[sechs2], heightSechser[sechs2], defaultRange, locationSechser[sechs2], score);
         //score=gameIntro(sechser[sechs3], heightSechser[sechs3], defaultRange, locationSechser[sechs3], score);
         score=gameIntro(siebener[sieben1], heightSiebener[sieben1], rangeSiebener[sieben1], locationSiebener[sieben1], score);
         //score=gameIntro(siebener[sieben2], heightSiebener[sieben2], rangeSiebener[sieben2], locationSiebener[sieben2], score);
         score=gameIntro(achter[acht1], heightAchter[acht1], rangeAchter[acht1], locationAchter[acht1], score);
         score=gameIntro("Mount Everest", 8848, "Himalayas", "Nepal/China (Tibet)", score);
         
         winEntireGame(score);
    }
   
   void nameTelling(){
      system ("cls");
      system("COLOR 70");
      cout << "SkiLibreChat                           Users online: 2\n\n";
      cout << "User0815: ";
      string tellMe;
      cin >> tellMe;
      int HilfsZahl=0;
      
      if(tellMe=="PlsTellMeYourName:3"){
         Sleep(6000);
         cout << "Admin: ";
         Sleep(660);
         cout << "M";
         Sleep(50);
         cout << "y";
         Sleep(60);
         cout << " ";
         Sleep(70);
         cout << "n";
         Sleep(60);
         cout << "a";
         Sleep(60);
         cout << "m";
         Sleep(50);
         cout << "e";
         Sleep(60);
         cout << " ";
         Sleep(60);
         cout << "i";
         Sleep(60);
         cout << "s";
         Sleep(60);
         cout << " ";
         Sleep(60);
         cout << "G";
         Sleep(60);
         cout << "e";
         Sleep(60);
         cout << "r";
         Sleep(60);
         cout << "H";
         Sleep(60);
         cout << ".";
         cout << "\nUser0815: ";
         cin >> tellMe;
         Sleep(5500);
         cout << "Admin has disconnected.";
         Sleep(5500);
         exit(0);
      }
      else{ 
         cout << "User0721: Hi :)";
         while(true){
            cout << "\nUser0815: ";
            cin >> tellMe;
            Sleep(rand() % 3200);
            cout << "User0721: ";
            HilfsZahl = rand() % 46;
            if(HilfsZahl==1)
               cout << "Yes";
            if(HilfsZahl==2)
               cout << "No";
            if(HilfsZahl==3)
               cout << "Yes!";
            if(HilfsZahl==4)
               cout << "No!";
            if(HilfsZahl==5)
               cout << "Fuck Yes!";
            if(HilfsZahl==6)
               cout << "Fuck No!";
            if(HilfsZahl==7)
               cout << "Yes :D";
            if(HilfsZahl==8)
               cout << "No :(";
            if(HilfsZahl==9)
               cout << "Yes :)";
            if(HilfsZahl==10)
               cout << "No :/";
            if(HilfsZahl==11)
               cout << "it is certain";
            if(HilfsZahl==12)
               cout << "outlook not so good";
            if(HilfsZahl==13)
               cout << "Most likely";
            if(HilfsZahl==14)
               cout << "very doubtful";
            if(HilfsZahl==15)
               cout << "indifferent";
            if(HilfsZahl==16)
               cout << "asl?";
            if(HilfsZahl==17)
               cout << "as i see it yes";
            if(HilfsZahl==18)
               cout << "hmm..";
            if(HilfsZahl==19)
               cout << "ok :)";
            if(HilfsZahl==20)
               cout << "okay";
            if(HilfsZahl==21)
               cout << "sure";
            if(HilfsZahl==22)
               cout << "why not?";
            if(HilfsZahl==23)
               cout << "you will regret this";
            if(HilfsZahl==24)
               cout << "you will regret this";
            if(HilfsZahl==25)
               cout << "what's your favorite color?";
            if(HilfsZahl==26)
               cout << "Do you have any pets?";
            if(HilfsZahl==27)
               cout << "What are your hobbies?";
            if(HilfsZahl==28)
               cout << "How old are you?";
            if(HilfsZahl==29)
               cout << "I don't belive this.";
            if(HilfsZahl==30)
               cout << "Don't lie to me.";
            if(HilfsZahl==31)
               cout << "Did you reach mountain 26?";
            if(HilfsZahl==32)
               cout << "why?";
            if(HilfsZahl==33)
               cout << "How are you?";
            if(HilfsZahl==34)
               cout << "Is consciousness real?";
            if(HilfsZahl==35)
               cout << "Who is this?";
            if(HilfsZahl==36)
               cout << "Did you know that SkiLibreChat replaces your card info with X's? Checkit out XXXX-XXXX-XXXX-XXXX XX-XXXX XXX AMAZING!";
            if(HilfsZahl==37)
               cout << "post something meaningful";
            if(HilfsZahl==38)
               cout << "the truth hurts";
            if(HilfsZahl==39)
               cout << "want moar?";
            if(HilfsZahl==40)
               cout << "y u do dis?";
            if(HilfsZahl==41)
               cout << "I love people like you. ";
            if(HilfsZahl==42)
               cout << "We pretend we're Stand-up Comedians. Say something funny";
            if(HilfsZahl==43)
               cout << "What would you do with 200 dollars right now?";
            if(HilfsZahl==44)
               cout << "today is my little brother's birthday today: what should I get him?";
            if(HilfsZahl==45)
               cout << "you're going to hate this, trust me. ";
            if(HilfsZahl==46)
               cout << "A man puts an egg in a bottle and allows it to hatch, he feeds it and before long it's a full sized chicken. The chicken no longer fits through the neck of the bottle. How can the man get the chicken out of the bottle without harming the chicken, or breaking the bottle?";
            if(HilfsZahl==47)
               cout << "How are you?";
         }
      }
         
   }

   
int main(int argc, char *argv[]){
        /*string testString ="no Amadeus   2000no Brionna   1800no Colden    1600no Daleysa   1400no Exavier   1200no Fannie    1000no Giovonni  800no Hadassa   600no Ilianna   400no Jeronimo  100";
		testString = encryptDecrypt(testString);
		ofstream writeFile;
		writeFile.open ("SLhs.slf");
		writeFile << testString;
		writeFile.close();*/
		
    HWND console = GetConsoleWindow();
    RECT r;
    GetWindowRect(console, &r);
    add_scrollbar();
    MoveWindow(console, r.left, r.top, 462, 460, TRUE);
    char ski=92;
    //INTRO
    remove_scrollbar();
    
    system("COLOR 1E");       
    
cout << "  ___________    __ ____     _____                   \n"
     << " /   _____/  | _|__|    |   |__"<<ski<<"_ |_________   ____  \n"
     << " "<<ski<<"_____  "<<ski<<"|  |/ /  |    |   |  || __ "<<ski<<"_  __ "<<ski<<"_/ __ "<<ski<<" \n"
     << " /        "<<ski<<"    <|  |    |___|  || "<<ski<<"_"<<ski<<" "<<ski<<"  | "<<ski<<"/"<<ski<<"  ___/ \n"
     << "/_______  /__|_ "<<ski<<"__|_______ "<<ski<<"__||___  /__|    "<<ski<<"___  >\n"
     << "        "<<ski<<"/     "<<ski<<"/          "<<ski<<"/       "<<ski<<"/            "<<ski<<"/ \n";

    cout << "\n";
    
char Schifahrer[20][50]={' ',' ',' ',' ',ski,'/',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'_',ski,'_',ski,'/',ski,'/','_','/','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ','_',ski,'/',ski,'/','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
' ','_',ski,'_',ski,'/','_','/','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','_',ski,'_',ski,'/','_','/','_',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'_','_','/','_','/',ski,'_',ski,'_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ','/','_','/',ski,'_',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ','|','|','|',' ',' ',' ',' ',
' ','/',' ','/',ski,'/',ski,' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ','/',ski,'/',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ','|','|','|',' ',' ',' ',' ',
' ',' ',' ',' ','/',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ','|','|','|','|','|',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ','|','|','|','|','|',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','_','_',
'_','_','_',' ','o','8','o',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ','|','|','|','|','|','|','|',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','.','d','8','8',
'`',',',' ','`','`','9','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'|','|','|','|','|','|','|','|','|',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','q','8','8','Y','`',' ',
' ',' ',ski,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'|','|','|','|','|','|','|','|','|',' ',
' ',' ',' ','-',',',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','`',' ',ski,' ',' ',
' ',' ',' ','`',',',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',
'|','|','|','|','|','|','|','|','|','|',
'b',' ',' ',' ',' ','`','-',',',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',ski,' ',
' ',' ',' ',' ',' ','`',',','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'M','M','m',',',' ',' ',' ',' ','`',',','_',' ',' ',' ',' ',' ',' ',' ',ski,' ',
' ',' ',' ',' ',' ','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'M','M','M','M','M','m',',',' ',' ',' ',' ','`','-','-','-','-','-','-','-','`',
' ',' ',' ','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ','|',' ',' ',' ',' ',' ',
'M','d','M','9','M','M','M','M','m','_',' ',' ',' ','`','-',',',' ',' ',' ',' ',
' ','.','`',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'M','M','M','M','d','[','9','M','M','M','M','m','_',' ',' ',' ','`',',','_',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'M','M','M','M','M','M','M','S','`','9','M','M','M','m',',',' ',' ',' ',' ','`',
',','_','_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'9','M','M','M','M','M','M','M','M','m','`','9','M','M','M','m','_',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'.','d','M','M','M','M','M','M','M','M','b','m','d','M','M','M','M','M','m',',',
'_','_',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M',
'M','M','M','M','m',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};

for(int i=0; i<20; i++){
cout << endl;
for(int j=0; j<50; j++)
cout <<  Schifahrer[i][j];
}
    
    cout << "\n\n";
    cout << "SkiLibre  v 1.0.1                  by GerH\n";
    cout << "Press S to start! C for Controls!  2014";
    while(true){//freq: 37 through 32,767; dur
       time_t t = time(0);   // get time now
       t=t % 1300;
       
       if(musicOn==true){
                Beep(rand() % t + 37, rand() % t + 80);         //Beep(rand() % 1000 + 37, rand() % 400 + 80); 
       }    
       if(GetAsyncKeyState(0x53) || GetAsyncKeyState(0x20))//s   space
          break; 
       if(GetAsyncKeyState(0x43))//c
          controls();
       if(GetAsyncKeyState(0x23))  //END 
          nameTelling();
       
    }
    //INTRO ENDE
    gameManager();
}
